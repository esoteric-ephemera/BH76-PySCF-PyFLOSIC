#INFO: **** input file is /home/tuf53878/BH76/LSDA_BH76/c2h4/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e070', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:36:52 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 16
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      0.665593850000   0.000000000000   0.000000000000 AA    1.257790086695   0.000000000000   0.000000000000 Bohr
[INPUT]  2 C     -0.665593850000   0.000000000000   0.000000000000 AA   -1.257790086695   0.000000000000   0.000000000000 Bohr
[INPUT]  3 H      1.231670630000  -0.921493390000   0.000000000000 AA    2.327520166371  -1.741370132697   0.000000000000 Bohr
[INPUT]  4 H      1.231670630000   0.921493390000   0.000000000000 AA    2.327520166371   1.741370132697   0.000000000000 Bohr
[INPUT]  5 H     -1.231670630000  -0.921493390000   0.000000000000 AA   -2.327520166371  -1.741370132697   0.000000000000 Bohr
[INPUT]  6 H     -1.231670630000   0.921493390000   0.000000000000 AA   -2.327520166371   1.741370132697   0.000000000000 Bohr

nuclear repulsion = 33.4234979295892
number of shells = 94
number of NR pGTOs = 378
number of NR cGTOs = 344
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.46


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444415/tmprvx34c_2
max_memory 4000 MB (current use 60 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = LDA_X, LDA_C_PW
    P. A. M. Dirac, Math. Proc. Cambridge Philos. Soc. 26, 376 (1930)
    F. Bloch, Z. Phys. 57, 545 (1929)
    J. P. Perdew and Y. Wang, Phys. Rev. B 45, 13244 (1992)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b20f360b940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b20f360b8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 994992
init E= -77.7921443759846
  HOMO = -0.33204166197855  LUMO = -0.1104702278461
cycle= 1 E= -77.8071489736145  delta_E= -0.015  |g|= 0.434  |ddm|= 1.58
  HOMO = -0.162109043519264  LUMO = 0.00396468226475858
cycle= 2 E= -77.7443326539383  delta_E= 0.0628  |g|= 0.643  |ddm|= 0.644
  HOMO = -0.257898673594656  LUMO = -0.0490349705137209
cycle= 3 E= -77.8570367123362  delta_E= -0.113  |g|= 0.0128  |ddm|= 0.428
  HOMO = -0.255299775667144  LUMO = -0.0473618946981543
cycle= 4 E= -77.8570719202044  delta_E= -3.52e-05  |g|= 0.00172  |ddm|= 0.0234
  HOMO = -0.255400337864508  LUMO = -0.0473372842710487
cycle= 5 E= -77.8570726517784  delta_E= -7.32e-07  |g|= 0.000443  |ddm|= 0.0015
  HOMO = -0.255464557097771  LUMO = -0.0474120519551595
cycle= 6 E= -77.8570726971092  delta_E= -4.53e-08  |g|= 3.22e-05  |ddm|= 0.000343
  HOMO = -0.255482048052227  LUMO = -0.0474261497049134
Extra cycle  E= -77.8570726970787  delta_E= 3.05e-11  |g|= 3.26e-05  |ddm|= 4.83e-05
converged SCF energy = -77.8570726970787
