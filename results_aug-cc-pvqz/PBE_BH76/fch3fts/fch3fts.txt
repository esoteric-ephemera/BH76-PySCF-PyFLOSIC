#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/fch3fts/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 15:06:42 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 28
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      1.823558790000   0.000519270000   0.000108740000 AA    3.446026685143   0.000981278085   0.000205488819 Bohr
[INPUT]  2 C      0.000144160000  -0.000089730000  -0.000182270000 AA    0.000272422918  -0.000169565125  -0.000344440381 Bohr
[INPUT]  3 H      0.000064160000  -0.304888770000   1.025069230000 AA    0.000121244828  -0.576156273756   1.937100103419 Bohr
[INPUT]  4 H      0.000287160000   1.040178190000  -0.248932400000 AA    0.000542653754   1.965651899846  -0.470414059531 Bohr
[INPUT]  5 H     -0.000094840000  -0.736259250000  -0.776176040000 AA   -0.000179221626  -1.391328339178  -1.466760140049 Bohr
[INPUT]  6 F     -1.823959440000   0.000540270000   0.000112740000 AA   -3.446783803915   0.001020962333   0.000213047723 Bohr

nuclear repulsion = 66.3661265962373
number of shells = 99
number of NR pGTOs = 423
number of NR cGTOs = 378
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.13


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmp4hsxl6xq
max_memory 4000 MB (current use 60 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b6250b0a940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b6250b0a8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 994848
init E= -239.138137225794
  HOMO = -0.389074529323631  LUMO = -0.0904559891271148
cycle= 1 E= -239.280827623526  delta_E= -0.143  |g|= 1.03  |ddm|= 1.22
  HOMO = 0.147985755535048  LUMO = 0.169447483791004
cycle= 2 E= -230.329145117052  delta_E= 8.95  |g|= 5.02  |ddm|=  576
  HOMO = -0.149728224850041  LUMO = 0.0923346162768431
cycle= 3 E= -239.458735569084  delta_E= -9.13  |g|= 0.203  |ddm|=  576
  HOMO = -0.0468073867371198  LUMO = 0.115644498651124
cycle= 4 E= -239.470365817395  delta_E= -0.0116  |g|= 0.0882  |ddm|= 0.304
  HOMO = -0.0376274977891761  LUMO = 0.115242699442264
cycle= 5 E= -239.47018150705  delta_E= 0.000184  |g|= 0.0901  |ddm|= 0.0906
  HOMO = -0.0368419477530226  LUMO = 0.115201760719687
cycle= 6 E= -239.471506874968  delta_E= -0.00133  |g|= 0.0193  |ddm|= 0.0488
  HOMO = -0.0359373782373157  LUMO = 0.115097868682389
cycle= 7 E= -239.471564038534  delta_E= -5.72e-05  |g|= 0.00577  |ddm|= 0.0131
  HOMO = -0.0361011760939203  LUMO = 0.11490416145921
cycle= 8 E= -239.471570421451  delta_E= -6.38e-06  |g|= 0.00111  |ddm|= 0.00272
  HOMO = -0.0360584286048129  LUMO = 0.114857542783323
cycle= 9 E= -239.471570633806  delta_E= -2.12e-07  |g|= 0.000122  |ddm|= 0.000753
  HOMO = -0.0360374405850486  LUMO = 0.114861335508427
cycle= 10 E= -239.471570636189  delta_E= -2.38e-09  |g|= 7.22e-06  |ddm|= 0.000102
  HOMO = -0.0360368083695313  LUMO = 0.114861954788246
Extra cycle  E= -239.471570636187  delta_E= 2.16e-12  |g|= 8.6e-06  |ddm|= 9.02e-06
converged SCF energy = -239.471570636187
