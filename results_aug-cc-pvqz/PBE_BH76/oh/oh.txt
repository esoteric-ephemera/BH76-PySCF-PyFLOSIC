#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/oh/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 15:22:08 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.484448280000 AA    0.000000000000   0.000000000000   0.915474570717 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000  -0.484448280000 AA    0.000000000000   0.000000000000  -0.915474570717 Bohr

nuclear repulsion = 4.3693185239093
number of shells = 33
number of NR pGTOs = 141
number of NR cGTOs = 126
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.32


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmp2x4pt29t
max_memory 4000 MB (current use 62 MB)
number electrons alpha = 5  beta = 4
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b76e05c2940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b76e05c28b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 329600
init E= -75.6271368599991
  alpha nocc = 5  HOMO = -0.365463107958371  LUMO = -0.0280702899452655

WARN: beta  nocc = 4  HOMO -0.365463107958373 >= LUMO -0.36546310795837


WARN: system HOMO -0.36546310795837 >= system LUMO -0.36546310795837

cycle= 1 E= -75.6576226008973  delta_E= -0.0305  |g|= 0.281  |ddm|= 0.486
  alpha nocc = 5  HOMO = -0.201530652497308  LUMO = -0.0228381559478646
  beta  nocc = 4  HOMO = -0.180109261075579  LUMO = -0.159182394382279
cycle= 2 E= -75.6040926374268  delta_E= 0.0535  |g|= 0.47  |ddm|= 0.319
  alpha nocc = 5  HOMO = -0.302379597706662  LUMO = -0.0320225985262729
  beta  nocc = 4  HOMO = -0.279668052137513  LUMO = -0.251338660216784
cycle= 3 E= -75.6877439738823  delta_E= -0.0837  |g|= 0.0274  |ddm|= 0.201
  alpha nocc = 5  HOMO = -0.292849007462787  LUMO = -0.0287044997229264
  beta  nocc = 4  HOMO = -0.270476690008715  LUMO = -0.23682289627603
cycle= 4 E= -75.6879939887615  delta_E= -0.00025  |g|= 0.00732  |ddm|= 0.0142
  alpha nocc = 5  HOMO = -0.294199097059102  LUMO = -0.0293929597854484
  beta  nocc = 4  HOMO = -0.271681430042178  LUMO = -0.237338886581001
cycle= 5 E= -75.6880132285879  delta_E= -1.92e-05  |g|= 0.000566  |ddm|= 0.00355
  alpha nocc = 5  HOMO = -0.294220880858047  LUMO = -0.0293640602972289
  beta  nocc = 4  HOMO = -0.271592894843025  LUMO = -0.237280394565645
cycle= 6 E= -75.6880134428773  delta_E= -2.14e-07  |g|= 0.000112  |ddm|= 0.000443
  alpha nocc = 5  HOMO = -0.294235944818141  LUMO = -0.029345069586354
  beta  nocc = 4  HOMO = -0.271572819012333  LUMO = -0.237259027268501
cycle= 7 E= -75.6880134554819  delta_E= -1.26e-08  |g|= 1.92e-05  |ddm|= 0.000143
  alpha nocc = 5  HOMO = -0.294241142269704  LUMO = -0.0293455672610132
  beta  nocc = 4  HOMO = -0.271577902262822  LUMO = -0.237264966943691
Extra cycle  E= -75.6880134555823  delta_E= -1e-10  |g|= 2.03e-05  |ddm|= 2.37e-05
converged SCF energy = -75.6880134555823  <S^2> = 0.75231642  2S+1 = 2.0023151
