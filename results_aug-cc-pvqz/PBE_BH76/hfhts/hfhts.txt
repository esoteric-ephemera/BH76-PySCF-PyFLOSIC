#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/hfhts/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 15:12:58 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 11
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000   1.137217780000 AA    0.000000000000   0.000000000000   2.149030148186 Bohr
[INPUT]  2 F      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.137217780000 AA    0.000000000000   0.000000000000  -2.149030148186 Bohr

nuclear repulsion = 8.60853441987163
number of shells = 47
number of NR pGTOs = 189
number of NR cGTOs = 172
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.36


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpjdykhwzn
max_memory 4000 MB (current use 64 MB)
number electrons alpha = 6  beta = 5
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2abf04a65940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2abf04a658b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 507000
init E= -100.855608888522
  alpha nocc = 6  HOMO = -0.12503649362333  LUMO = -0.0301019165607191
  beta  nocc = 5  HOMO = -0.450077784862771  LUMO = -0.125036493623327

WARN: system HOMO -0.125036493623327 >= system LUMO -0.125036493623327

cycle= 1 E= -100.829175827666  delta_E= 0.0264  |g|= 0.275  |ddm|= 0.547
  alpha nocc = 6  HOMO = -0.17998079362625  LUMO = -0.0493279888429734
  beta  nocc = 5  HOMO = -0.303700317831229  LUMO = -0.103645198854959
cycle= 2 E= -100.765622770595  delta_E= 0.0636  |g|= 0.56  |ddm|= 0.302
  alpha nocc = 6  HOMO = -0.189908001488616  LUMO = -0.070136484828889
  beta  nocc = 5  HOMO = -0.40658158235461  LUMO = -0.113566945274386
cycle= 3 E= -100.856223113674  delta_E= -0.0906  |g|= 0.0183  |ddm|= 0.154
  alpha nocc = 6  HOMO = -0.179093777712603  LUMO = -0.0607533800825005
  beta  nocc = 5  HOMO = -0.394184844067531  LUMO = -0.0975988656961155
cycle= 4 E= -100.856421375888  delta_E= -0.000198  |g|= 0.00544  |ddm|= 0.0695
  alpha nocc = 6  HOMO = -0.180133203261786  LUMO = -0.0610739074530349
  beta  nocc = 5  HOMO = -0.395399621121941  LUMO = -0.0963095927819459
cycle= 5 E= -100.856437033877  delta_E= -1.57e-05  |g|= 0.000868  |ddm|= 0.00418
  alpha nocc = 6  HOMO = -0.180028549516434  LUMO = -0.0609051537296524
  beta  nocc = 5  HOMO = -0.395195458506482  LUMO = -0.0960768684193911
cycle= 6 E= -100.856437308109  delta_E= -2.74e-07  |g|= 6.96e-05  |ddm|= 0.000617
  alpha nocc = 6  HOMO = -0.180032419871464  LUMO = -0.0609065088082397
  beta  nocc = 5  HOMO = -0.395195126688061  LUMO = -0.0960860721897722
cycle= 7 E= -100.85643730939  delta_E= -1.28e-09  |g|= 1.54e-05  |ddm|= 6.63e-05
  alpha nocc = 6  HOMO = -0.180035310582555  LUMO = -0.0609097177677003
  beta  nocc = 5  HOMO = -0.39520892928596  LUMO = -0.09608926651574
Extra cycle  E= -100.856437309197  delta_E= 1.94e-10  |g|= 3.19e-05  |ddm|= 1.69e-05
converged SCF energy = -100.856437309197  <S^2> = 0.75601434  2S+1 = 2.0060053
