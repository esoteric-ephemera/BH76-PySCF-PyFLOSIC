#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/HS/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 13:47:02 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 17
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 S      0.000000000000   0.000000000000   0.670101650000 AA    0.000000000000   0.000000000000   1.266308594119 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000  -0.670101650000 AA    0.000000000000   0.000000000000  -1.266308594119 Bohr

nuclear repulsion = 6.31757538182453
number of shells = 33
number of NR pGTOs = 160
number of NR cGTOs = 130
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.35


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpbdka8sux
max_memory 4000 MB (current use 64 MB)
number electrons alpha = 9  beta = 8
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2af41e758940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2af41e7588b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 319160
init E= -398.530425477047
  alpha nocc = 9  HOMO = -0.269416368160619  LUMO = -0.0335483233572955

WARN: beta  nocc = 8  HOMO -0.269416368160625 >= LUMO -0.269416368160619


WARN: system HOMO -0.269416368160619 >= system LUMO -0.269416368160619

cycle= 1 E= -398.581624787612  delta_E= -0.0512  |g|= 0.0988  |ddm|= 0.839
  alpha nocc = 9  HOMO = -0.222945231058881  LUMO = -0.0295529542717864
  beta  nocc = 8  HOMO = -0.208300515642993  LUMO = -0.20291949907424
cycle= 2 E= -398.58429277429  delta_E= -0.00267  |g|= 0.0676  |ddm|= 0.196
  alpha nocc = 9  HOMO = -0.246668634158341  LUMO = -0.0328757735863486
  beta  nocc = 8  HOMO = -0.233044737553086  LUMO = -0.220912384072172
cycle= 3 E= -398.587063327769  delta_E= -0.00277  |g|= 0.0307  |ddm|= 0.0974
  alpha nocc = 9  HOMO = -0.24291916304207  LUMO = -0.0325358244710085
  beta  nocc = 8  HOMO = -0.229929919998336  LUMO = -0.214358904344397
cycle= 4 E= -398.587558092885  delta_E= -0.000495  |g|= 0.00497  |ddm|= 0.0356
  alpha nocc = 9  HOMO = -0.241397032255733  LUMO = -0.0318147844192887
  beta  nocc = 8  HOMO = -0.228595621277207  LUMO = -0.212396961591155
cycle= 5 E= -398.587571652406  delta_E= -1.36e-05  |g|= 0.00242  |ddm|= 0.00628
  alpha nocc = 9  HOMO = -0.241801750410595  LUMO = -0.0319959824047115
  beta  nocc = 8  HOMO = -0.229012801617111  LUMO = -0.212784730417448
cycle= 6 E= -398.587573913253  delta_E= -2.26e-06  |g|= 0.000196  |ddm|= 0.00277
  alpha nocc = 9  HOMO = -0.24177644605028  LUMO = -0.031987132085802
  beta  nocc = 8  HOMO = -0.228983295690257  LUMO = -0.212759483222422
cycle= 7 E= -398.587573922654  delta_E= -9.4e-09  |g|= 4.58e-05  |ddm|= 0.000323
  alpha nocc = 9  HOMO = -0.241792645369326  LUMO = -0.0319935436046904
  beta  nocc = 8  HOMO = -0.228998426044491  LUMO = -0.212772302552046
Extra cycle  E= -398.587573922978  delta_E= -3.24e-10  |g|= 3.06e-05  |ddm|= 9.18e-05
converged SCF energy = -398.587573922978  <S^2> = 0.75418556  2S+1 = 2.0041812
