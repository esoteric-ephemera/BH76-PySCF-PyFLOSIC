#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/RKT06/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 13:54:42 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 3
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.929473380000 AA    0.000000000000   0.000000000000   1.756450128274 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -0.929473380000 AA    0.000000000000   0.000000000000  -1.756450128274 Bohr

nuclear repulsion = 1.42332535365349
number of shells = 42
number of NR pGTOs = 144
number of NR cGTOs = 138
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.38


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpk7rf5ctz
max_memory 4000 MB (current use 60 MB)
number electrons alpha = 2  beta = 1
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b4bd3f7c940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b4bd3f7c8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 516648
init E= -1.46611400071197
  alpha nocc = 2  HOMO = -0.183625884438679  LUMO = -0.00076907737214178
  beta  nocc = 1  HOMO = -0.448679468790585  LUMO = -0.183625884438676

WARN: system HOMO -0.183625884438676 >= system LUMO -0.183625884438676

cycle= 1 E= -1.65808195923602  delta_E= -0.192  |g|= 0.0443  |ddm|= 0.416
  alpha nocc = 2  HOMO = -0.220090954425119  LUMO = -0.0105559249414696
  beta  nocc = 1  HOMO = -0.416245539242787  LUMO = -0.13848872797198
cycle= 2 E= -1.66047499710714  delta_E= -0.00239  |g|= 0.0113  |ddm|= 0.116
  alpha nocc = 2  HOMO = -0.21966971103967  LUMO = -0.00830998967416959
  beta  nocc = 1  HOMO = -0.417727655113121  LUMO = -0.13009556399122
cycle= 3 E= -1.66062375655852  delta_E= -0.000149  |g|= 0.00393  |ddm|= 0.0406
  alpha nocc = 2  HOMO = -0.219611080811578  LUMO = -0.00795532078213664
  beta  nocc = 1  HOMO = -0.415473269398385  LUMO = -0.12801278525337
cycle= 4 E= -1.66063725686208  delta_E= -1.35e-05  |g|= 0.000422  |ddm|= 0.0056
  alpha nocc = 2  HOMO = -0.220044464245504  LUMO = -0.00814406289913981
  beta  nocc = 1  HOMO = -0.416099476581723  LUMO = -0.128446232370633
cycle= 5 E= -1.66063743225683  delta_E= -1.75e-07  |g|= 5.18e-05  |ddm|= 0.000891
  alpha nocc = 2  HOMO = -0.220001949436619  LUMO = -0.00813652250543174
  beta  nocc = 1  HOMO = -0.416063263355274  LUMO = -0.128407494799184
cycle= 6 E= -1.660637434883  delta_E= -2.63e-09  |g|= 2.62e-06  |ddm|= 0.000208
  alpha nocc = 2  HOMO = -0.220004317495486  LUMO = -0.00813685773824773
  beta  nocc = 1  HOMO = -0.416066103006609  LUMO = -0.128409940017245
Extra cycle  E= -1.66063743488733  delta_E= -4.33e-12  |g|= 6.59e-07  |ddm|= 1.07e-05
converged SCF energy = -1.66063743488733  <S^2> = 0.75696663  2S+1 = 2.0069545
