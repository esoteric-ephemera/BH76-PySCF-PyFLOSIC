#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/NH/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 13:47:55 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 8
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 2
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 N      0.000000000000   0.000000000000   0.518366690000 AA    0.000000000000   0.000000000000   0.979571076197 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000  -0.518366690000 AA    0.000000000000   0.000000000000  -0.979571076197 Bohr

nuclear repulsion = 3.57299238926791
number of shells = 33
number of NR pGTOs = 141
number of NR cGTOs = 126
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.32


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpozdu6xn0
max_memory 4000 MB (current use 62 MB)
number electrons alpha = 5  beta = 3
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b3183dc7940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b3183dc78b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 327548
init E= -55.0522334692978
  alpha nocc = 5  HOMO = -0.229237857214582  LUMO = -0.0116956840367009
  beta  nocc = 3  HOMO = -0.352301471111175  LUMO = -0.229237857214581

WARN: system HOMO -0.22923785721458 >= system LUMO -0.229237857214581

cycle= 1 E= -55.1668983431819  delta_E= -0.115  |g|= 0.127  |ddm|= 0.541
  alpha nocc = 5  HOMO = -0.312257068275408  LUMO = -0.0326325665225975
  beta  nocc = 3  HOMO = -0.33234166582041  LUMO = -0.186833563513983
cycle= 2 E= -55.1734232823902  delta_E= -0.00652  |g|= 0.0662  |ddm|= 0.113
  alpha nocc = 5  HOMO = -0.282049055849763  LUMO = -0.0236606786506054
  beta  nocc = 3  HOMO = -0.310674958522139  LUMO = -0.153589184680969
cycle= 3 E= -55.1748251938837  delta_E= -0.0014  |g|= 0.0311  |ddm|= 0.0469
  alpha nocc = 5  HOMO = -0.292678898023508  LUMO = -0.0239735823007464
  beta  nocc = 3  HOMO = -0.32046938656403  LUMO = -0.161014291140884
cycle= 4 E= -55.1752288869168  delta_E= -0.000404  |g|= 0.0107  |ddm|= 0.0228
  alpha nocc = 5  HOMO = -0.29100060625145  LUMO = -0.0240657943198197
  beta  nocc = 3  HOMO = -0.318230276399685  LUMO = -0.15871565227468
cycle= 5 E= -55.1752882907114  delta_E= -5.94e-05  |g|= 0.000595  |ddm|= 0.00709
  alpha nocc = 5  HOMO = -0.291146342457693  LUMO = -0.0240886886852007
  beta  nocc = 3  HOMO = -0.318244985319391  LUMO = -0.158743392149826
cycle= 6 E= -55.1752885334483  delta_E= -2.43e-07  |g|= 0.000124  |ddm|= 0.000533
  alpha nocc = 5  HOMO = -0.291132876222629  LUMO = -0.0240768681275782
  beta  nocc = 3  HOMO = -0.318234130460342  LUMO = -0.158727711051023
cycle= 7 E= -55.1752885474721  delta_E= -1.4e-08  |g|= 1.33e-05  |ddm|= 0.000155
  alpha nocc = 5  HOMO = -0.291135881113637  LUMO = -0.0240758463362121
  beta  nocc = 3  HOMO = -0.318236665318716  LUMO = -0.158730597179435
Extra cycle  E= -55.1752885475756  delta_E= -1.04e-10  |g|= 6.36e-06  |ddm|= 1.49e-05
converged SCF energy = -55.1752885475756  <S^2> = 2.0050665  2S+1 = 3.0033758
