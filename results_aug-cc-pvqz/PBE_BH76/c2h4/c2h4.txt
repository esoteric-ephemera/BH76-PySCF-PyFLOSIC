#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/c2h4/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:37:31 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 16
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      0.665593850000   0.000000000000   0.000000000000 AA    1.257790086695   0.000000000000   0.000000000000 Bohr
[INPUT]  2 C     -0.665593850000   0.000000000000   0.000000000000 AA   -1.257790086695   0.000000000000   0.000000000000 Bohr
[INPUT]  3 H      1.231670630000  -0.921493390000   0.000000000000 AA    2.327520166371  -1.741370132697   0.000000000000 Bohr
[INPUT]  4 H      1.231670630000   0.921493390000   0.000000000000 AA    2.327520166371   1.741370132697   0.000000000000 Bohr
[INPUT]  5 H     -1.231670630000  -0.921493390000   0.000000000000 AA   -2.327520166371  -1.741370132697   0.000000000000 Bohr
[INPUT]  6 H     -1.231670630000   0.921493390000   0.000000000000 AA   -2.327520166371   1.741370132697   0.000000000000 Bohr

nuclear repulsion = 33.4234979295892
number of shells = 94
number of NR pGTOs = 378
number of NR cGTOs = 344
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.71


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpw9o371ny
max_memory 4000 MB (current use 69 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b994a780940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b994a7808b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 994992
init E= -78.4501486465519
  HOMO = -0.326939865859779  LUMO = -0.10517861008349
cycle= 1 E= -78.4614054320275  delta_E= -0.0113  |g|= 0.403  |ddm|= 1.74
  HOMO = -0.159660980840677  LUMO = 0.00161504989653909
cycle= 2 E= -78.409223139551  delta_E= 0.0522  |g|= 0.591  |ddm|= 0.673
  HOMO = -0.250705464664161  LUMO = -0.0410172579062627
cycle= 3 E= -78.5060028960526  delta_E= -0.0968  |g|= 0.00999  |ddm|= 0.432
  HOMO = -0.248764008115015  LUMO = -0.0399476097918516
cycle= 4 E= -78.5060270538819  delta_E= -2.42e-05  |g|= 0.00181  |ddm|= 0.0231
  HOMO = -0.248692854479826  LUMO = -0.0397589389158514
cycle= 5 E= -78.5060278067726  delta_E= -7.53e-07  |g|= 0.000409  |ddm|= 0.00324
  HOMO = -0.248733489757417  LUMO = -0.0398096606332499
cycle= 6 E= -78.5060278437007  delta_E= -3.69e-08  |g|= 2.07e-05  |ddm|= 0.000649
  HOMO = -0.248743565262947  LUMO = -0.0398175762619406
Extra cycle  E= -78.5060278437655  delta_E= -6.48e-11  |g|= 1.34e-05  |ddm|= 5.47e-05
converged SCF energy = -78.5060278437655
