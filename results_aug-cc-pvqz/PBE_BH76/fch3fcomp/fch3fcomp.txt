#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/fch3fcomp/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 15:05:01 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 28
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      0.000000000000   0.000000000000  -1.791371350000 AA    0.000000000000   0.000000000000  -3.385201238892 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000  -0.365617030000 AA    0.000000000000   0.000000000000  -0.690916053177 Bohr
[INPUT]  3 H     -0.511791130000   0.886448240000  -0.017586680000 AA   -0.967145068682   1.675144397203  -0.033234008640 Bohr
[INPUT]  4 H     -0.511791130000  -0.886448240000  -0.017586680000 AA   -0.967145068682  -1.675144397203  -0.033234008640 Bohr
[INPUT]  5 H      1.023582260000   0.000000000000  -0.017586680000 AA    1.934290137363   0.000000000000  -0.033234008640 Bohr
[INPUT]  6 F      0.000000000000   0.000000000000   2.209748410000 AA    0.000000000000   0.000000000000   4.175819299093 Bohr

nuclear repulsion = 64.3622301961202
number of shells = 99
number of NR pGTOs = 423
number of NR cGTOs = 378
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.31


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmp4n4sqhc5
max_memory 4000 MB (current use 60 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ae9f8ac2940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ae9f8ac28b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 994848
init E= -239.256856450589
  HOMO = -0.379266143685371  LUMO = -0.0328074298495316
cycle= 1 E= -239.289985418881  delta_E= -0.0331  |g|= 1.01  |ddm|= 1.25
  HOMO = 0.136358670546751  LUMO = 0.166724151826682
cycle= 2 E= -228.048225024316  delta_E= 11.2  |g|= 2.97  |ddm|=  461
  HOMO = -0.115037318111622  LUMO = 0.0744076467943685
cycle= 3 E= -239.20201507216  delta_E= -11.2  |g|= 1.23  |ddm|=  461
  HOMO = -0.165481489089781  LUMO = 0.0805936450505289
cycle= 4 E= -239.318538373545  delta_E= -0.117  |g|= 0.905  |ddm|= 0.214
  HOMO = -0.15368580452854  LUMO = 0.0880996575681247
cycle= 5 E= -239.344358126059  delta_E= -0.0258  |g|= 0.843  |ddm|= 0.14
  HOMO = -0.0985814849565495  LUMO = 0.101209339298716
cycle= 6 E= -239.426345729532  delta_E= -0.082  |g|= 0.568  |ddm|= 0.231
  HOMO = 0.0466415393765418  LUMO = 0.106518202583707
cycle= 7 E= -239.479483562117  delta_E= -0.0531  |g|= 0.131  |ddm|= 1.42
  HOMO = 0.0228915446211288  LUMO = 0.103644433086865
cycle= 8 E= -239.483338443203  delta_E= -0.00385  |g|= 0.0109  |ddm|= 0.627
  HOMO = 0.026109122136777  LUMO = 0.103990737154212
cycle= 9 E= -239.483324301094  delta_E= 1.41e-05  |g|= 0.0154  |ddm|= 0.0616
  HOMO = 0.0236192932015003  LUMO = 0.103994074571255
cycle= 10 E= -239.483363233059  delta_E= -3.89e-05  |g|= 0.00259  |ddm|= 0.0515
  HOMO = 0.0241565545374915  LUMO = 0.104090719471746
cycle= 11 E= -239.48336460253  delta_E= -1.37e-06  |g|= 0.000101  |ddm|= 0.0101
  HOMO = 0.0241483420555862  LUMO = 0.104097393490708
cycle= 12 E= -239.483364604544  delta_E= -2.01e-09  |g|= 1.87e-05  |ddm|= 0.000241
  HOMO = 0.0241387719551468  LUMO = 0.104096992190053
Extra cycle  E= -239.483364604195  delta_E= 3.49e-10  |g|= 4.97e-05  |ddm|= 0.000186
converged SCF energy = -239.483364604195
