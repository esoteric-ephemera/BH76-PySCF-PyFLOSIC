#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/RKT16/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:07:15 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 4
[INPUT] num. electrons = 19
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      1.262098590000   0.616730020000   0.000000000000 AA    2.385020677300   1.165450830598   0.000000000000 Bohr
[INPUT]  2 S      0.000000260000   1.059980000000   0.000000000000 AA    0.000000491329   2.003071897516   0.000000000000 Bohr
[INPUT]  3 H     -0.500576010000  -0.278620420000   0.000000000000 AA   -0.945951563428  -0.526516286511   0.000000000000 Bohr
[INPUT]  4 H     -0.761522840000  -1.398089600000   0.000000000000 AA   -1.439069605201  -2.642006441603   0.000000000000 Bohr

nuclear repulsion = 16.4575443006386
number of shells = 61
number of NR pGTOs = 256
number of NR cGTOs = 222
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.32


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpd3688rqa
max_memory 4000 MB (current use 62 MB)
number electrons alpha = 10  beta = 9
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ba085cd3940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ba085cd38b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 663592
init E= -399.63545848687
  alpha nocc = 10  HOMO = -0.215341308083982  LUMO = -0.0406985459447093
  beta  nocc = 9  HOMO = -0.279416370361014  LUMO = -0.21534130808398

WARN: system HOMO -0.21534130808398 >= system LUMO -0.21534130808398

cycle= 1 E= -399.720579979802  delta_E= -0.0851  |g|= 0.15  |ddm|= 0.926
  alpha nocc = 10  HOMO = -0.188114919930378  LUMO = -0.0211486474542332
  beta  nocc = 9  HOMO = -0.182881685425966  LUMO = -0.172980091507086
cycle= 2 E= -399.69531360122  delta_E= 0.0253  |g|= 0.24  |ddm|= 0.434
  alpha nocc = 10  HOMO = -0.239576426707641  LUMO = -0.0343775472877812
  beta  nocc = 9  HOMO = -0.234175529751904  LUMO = -0.174727354148012
cycle= 3 E= -399.738319270829  delta_E= -0.043  |g|= 0.0314  |ddm|= 0.259
  alpha nocc = 10  HOMO = -0.237995900618324  LUMO = -0.0328720089951721
  beta  nocc = 9  HOMO = -0.233330363637776  LUMO = -0.170477685769667
cycle= 4 E= -399.738762210549  delta_E= -0.000443  |g|= 0.0136  |ddm|= 0.0472
  alpha nocc = 10  HOMO = -0.236044645481855  LUMO = -0.0319061602716115
  beta  nocc = 9  HOMO = -0.231632894123599  LUMO = -0.16661545081819
cycle= 5 E= -399.738884653031  delta_E= -0.000122  |g|= 0.00409  |ddm|= 0.0154
  alpha nocc = 10  HOMO = -0.236214579710921  LUMO = -0.0319795907845161
  beta  nocc = 9  HOMO = -0.231794008597427  LUMO = -0.166458092227857
cycle= 6 E= -399.738889799708  delta_E= -5.15e-06  |g|= 0.00149  |ddm|= 0.00666
  alpha nocc = 10  HOMO = -0.236180949799087  LUMO = -0.0320200313360567
  beta  nocc = 9  HOMO = -0.231738723673954  LUMO = -0.16629968325291
cycle= 7 E= -399.738891229675  delta_E= -1.43e-06  |g|= 0.00039  |ddm|= 0.00173
  alpha nocc = 10  HOMO = -0.236125898079194  LUMO = -0.0319858260008781
  beta  nocc = 9  HOMO = -0.231670114466695  LUMO = -0.166228031226057
cycle= 8 E= -399.738891292904  delta_E= -6.32e-08  |g|= 7.32e-05  |ddm|= 0.000559
  alpha nocc = 10  HOMO = -0.236157250576964  LUMO = -0.0319972550220954
  beta  nocc = 9  HOMO = -0.231700040662745  LUMO = -0.166257950435849
Extra cycle  E= -399.738891293206  delta_E= -3.01e-10  |g|= 6.68e-05  |ddm|= 0.000149
converged SCF energy = -399.738891293206  <S^2> = 0.75540361  2S+1 = 2.0053963
