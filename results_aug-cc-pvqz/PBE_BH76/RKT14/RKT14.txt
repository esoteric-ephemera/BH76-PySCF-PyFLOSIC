#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/RKT14/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:06:03 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 2
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000  -0.092564570000 AA    0.000000000000   0.000000000000  -0.174921686138 Bohr
[INPUT]  2 O      0.000000000000   0.000000000000   1.096748070000 AA    0.000000000000   0.000000000000   2.072553479945 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.004183500000 AA    0.000000000000   0.000000000000  -1.897631793807 Bohr

nuclear repulsion = 6.15504992898095
number of shells = 47
number of NR pGTOs = 189
number of NR cGTOs = 172
basis = aug-cc-pvqz
ecp = {}
CPU time:         1.87


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpri6vusli
max_memory 4000 MB (current use 60 MB)
number electrons alpha = 6  beta = 4
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ac60d629940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ac60d6298b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 501816
init E= -76.0483609747832
  alpha nocc = 6  HOMO = -0.2559711921744  LUMO = 0.0040310702226858

WARN: beta  nocc = 4  HOMO -0.347806081991838 >= LUMO -0.347806081991838


WARN: system HOMO -0.255971192174401 >= system LUMO -0.347806081991838

cycle= 1 E= -76.150160907361  delta_E= -0.102  |g|= 0.25  |ddm|= 0.628
  alpha nocc = 6  HOMO = -0.20092900181072  LUMO = -0.00905713428068864
  beta  nocc = 4  HOMO = -0.171728752056695  LUMO = -0.168873006006476
cycle= 2 E= -76.0395587321756  delta_E= 0.111  |g|= 0.547  |ddm|= 0.453
  alpha nocc = 6  HOMO = -0.300817746430673  LUMO = -0.00288526723947961
  beta  nocc = 4  HOMO = -0.276913070532791  LUMO = -0.24706766283245
cycle= 3 E= -76.1815676390923  delta_E= -0.142  |g|= 0.0311  |ddm|= 0.299
  alpha nocc = 6  HOMO = -0.290258638304642  LUMO = 0.00139049285944572
  beta  nocc = 4  HOMO = -0.26573282796362  LUMO = -0.229289828926898
cycle= 4 E= -76.1819591304419  delta_E= -0.000391  |g|= 0.0136  |ddm|= 0.0275
  alpha nocc = 6  HOMO = -0.294439795481369  LUMO = 0.000654241330658207
  beta  nocc = 4  HOMO = -0.269142292005525  LUMO = -0.232248625913112
cycle= 5 E= -76.1820363244461  delta_E= -7.72e-05  |g|= 0.00231  |ddm|= 0.00856
  alpha nocc = 6  HOMO = -0.294501141962043  LUMO = 0.000671878367456767
  beta  nocc = 4  HOMO = -0.26908845639841  LUMO = -0.232402395300999
cycle= 6 E= -76.1820388453341  delta_E= -2.52e-06  |g|= 0.000399  |ddm|= 0.0021
  alpha nocc = 6  HOMO = -0.294381441972126  LUMO = 0.000707402451375862
  beta  nocc = 4  HOMO = -0.269001384866365  LUMO = -0.232336150560485
cycle= 7 E= -76.1820389108019  delta_E= -6.55e-08  |g|= 8.83e-05  |ddm|= 0.00046
  alpha nocc = 6  HOMO = -0.294422459989423  LUMO = 0.000700643368668679
  beta  nocc = 4  HOMO = -0.269035579556613  LUMO = -0.232368773888039
Extra cycle  E= -76.1820389113863  delta_E= -5.84e-10  |g|= 9.41e-05  |ddm|= 0.000105
converged SCF energy = -76.1820389113863  <S^2> = 2.0076089  2S+1 = 3.0050683
