#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/RKT01/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 13:49:16 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 19
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000  -0.256615860000 AA    0.000000000000   0.000000000000  -0.484933694620 Bohr
[INPUT]  2 Cl     0.000000000000   0.000000000000   1.287264580000 AA    0.000000000000   0.000000000000   2.432577506053 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.030648720000 AA    0.000000000000   0.000000000000  -1.947643811434 Bohr

nuclear repulsion = 10.3916291213484
number of shells = 47
number of NR pGTOs = 208
number of NR cGTOs = 176
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.39


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpsv253pwy
max_memory 4000 MB (current use 66 MB)
number electrons alpha = 10  beta = 9
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2adbe6d70940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2adbe6d708b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 491376
init E= -461.031873594445
  alpha nocc = 10  HOMO = -0.272663742525682  LUMO = -0.00763153777579975
  beta  nocc = 9  HOMO = -0.333645173539994  LUMO = -0.272663742525679

WARN: system HOMO -0.272663742525679 >= system LUMO -0.272663742525679

cycle= 1 E= -461.127719690197  delta_E= -0.0958  |g|= 0.122  |ddm|= 0.827
  alpha nocc = 10  HOMO = -0.257318545570841  LUMO = -0.0120486791551019
  beta  nocc = 9  HOMO = -0.24715343677362  LUMO = -0.220096389988311
cycle= 2 E= -461.118150309404  delta_E= 0.00957  |g|= 0.173  |ddm|= 0.449
  alpha nocc = 10  HOMO = -0.291390846952792  LUMO = -0.0082924806795956
  beta  nocc = 9  HOMO = -0.289574268084845  LUMO = -0.236561282847332
cycle= 3 E= -461.13781744168  delta_E= -0.0197  |g|= 0.0273  |ddm|= 0.204
  alpha nocc = 10  HOMO = -0.291469473153939  LUMO = -0.00847060291187787
  beta  nocc = 9  HOMO = -0.288888243461424  LUMO = -0.233309882453227
cycle= 4 E= -461.138115463145  delta_E= -0.000298  |g|= 0.0115  |ddm|= 0.0354
  alpha nocc = 10  HOMO = -0.290695733516835  LUMO = -0.00800406737947547
  beta  nocc = 9  HOMO = -0.287587665037438  LUMO = -0.231627603608875
cycle= 5 E= -461.138181835223  delta_E= -6.64e-05  |g|= 0.00351  |ddm|= 0.00996
  alpha nocc = 10  HOMO = -0.291374683080609  LUMO = -0.00804316839057106
  beta  nocc = 9  HOMO = -0.288010945798255  LUMO = -0.231909116220394
cycle= 6 E= -461.138186444841  delta_E= -4.61e-06  |g|= 0.000373  |ddm|= 0.00397
  alpha nocc = 10  HOMO = -0.291281428955332  LUMO = -0.00803628360696973
  beta  nocc = 9  HOMO = -0.287905785246828  LUMO = -0.231804117614908
cycle= 7 E= -461.138186494101  delta_E= -4.93e-08  |g|= 0.000113  |ddm|= 0.000574
  alpha nocc = 10  HOMO = -0.291336140197628  LUMO = -0.00804938206844687
  beta  nocc = 9  HOMO = -0.287970362822335  LUMO = -0.231862479187856
Extra cycle  E= -461.138186492536  delta_E= 1.57e-09  |g|= 0.000124  |ddm|= 0.000224
converged SCF energy = -461.138186492536  <S^2> = 0.7540837  2S+1 = 2.0040795
