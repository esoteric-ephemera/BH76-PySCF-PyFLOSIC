#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/fch3clcomp2/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 15:01:42 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 36
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      0.000000000000   0.000000000000  -1.889936260000 AA    0.000000000000   0.000000000000  -3.571461924285 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000  -0.481562760000 AA    0.000000000000   0.000000000000  -0.910021728190 Bohr
[INPUT]  3 H     -0.512360000000   0.887433540000  -0.127802480000 AA   -0.968220077182   1.677006344353  -0.241511685240 Bohr
[INPUT]  4 H     -0.512360000000  -0.887433540000  -0.127802480000 AA   -0.968220077182  -1.677006344353  -0.241511685240 Bohr
[INPUT]  5 H      1.024719990000   0.000000000000  -0.127802480000 AA    1.936440135467   0.000000000000  -0.241511685240 Bohr
[INPUT]  6 Cl     0.000000000000   0.000000000000   2.754906460000 AA    0.000000000000   0.000000000000   5.206018708195 Bohr

nuclear repulsion = 79.9097137776205
number of shells = 99
number of NR pGTOs = 442
number of NR cGTOs = 382
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.41


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmp3o5g5ouk
max_memory 4000 MB (current use 64 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b7b8453e940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b7b8453e8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 979224
init E= -599.554800253699
  HOMO = -0.326355022919356  LUMO = -0.032792463975679
cycle= 1 E= -599.668707510591  delta_E= -0.114  |g|= 0.613  |ddm|= 1.48
  HOMO = 0.11325905955901  LUMO = 0.116793556746045
cycle= 2 E= -597.338809098783  delta_E= 2.33  |g|= 2.17  |ddm|=  182
  HOMO = -0.112388119157133  LUMO = 0.0918885898256636
cycle= 3 E= -599.719590729711  delta_E= -2.38  |g|= 0.463  |ddm|=  182
  HOMO = -0.0275989468503343  LUMO = 0.0953010689351756
cycle= 4 E= -599.769773056617  delta_E= -0.0502  |g|= 0.128  |ddm|= 0.415
  HOMO = -0.020513006577455  LUMO = 0.0949192411017657
cycle= 5 E= -599.771305748611  delta_E= -0.00153  |g|= 0.0707  |ddm|= 0.145
  HOMO = -0.0102395698831985  LUMO = 0.0953890713248987
cycle= 6 E= -599.772298414615  delta_E= -0.000993  |g|= 0.0231  |ddm|= 0.0867
  HOMO = -0.00744591612553029  LUMO = 0.0952147766047849
cycle= 7 E= -599.772418009552  delta_E= -0.00012  |g|= 0.0023  |ddm|= 0.0377
  HOMO = -0.00763912534808249  LUMO = 0.0950922096462821
cycle= 8 E= -599.772418738151  delta_E= -7.29e-07  |g|= 0.000857  |ddm|= 0.00235
  HOMO = -0.00756772138229802  LUMO = 0.0950757215214833
cycle= 9 E= -599.772418930332  delta_E= -1.92e-07  |g|= 0.000188  |ddm|= 0.00122
  HOMO = -0.00754747905741675  LUMO = 0.0950639433298799
cycle= 10 E= -599.772418938527  delta_E= -8.2e-09  |g|= 8.25e-05  |ddm|= 0.000234
  HOMO = -0.00757099297718219  LUMO = 0.0950656930089363
Extra cycle  E= -599.772418935787  delta_E= 2.74e-09  |g|= 0.000129  |ddm|= 0.000258
converged SCF energy = -599.772418935787
