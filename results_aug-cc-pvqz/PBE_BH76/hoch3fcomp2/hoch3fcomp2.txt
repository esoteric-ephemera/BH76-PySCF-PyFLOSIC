#INFO: **** input file is /home/tuf53878/BH76/PBE_BH76/hoch3fcomp2/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 15:16:07 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 7
[INPUT] num. electrons = 28
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      2.249532920000  -0.161634700000  -0.009064510000 AA    4.251001126993  -0.305445315226  -0.017129441353 Bohr
[INPUT]  2 C      0.839893100000   0.020306500000   0.003107520000 AA    1.587167932912   0.038373723548   0.005872361727 Bohr
[INPUT]  3 H      0.351783820000  -0.871344470000  -0.364815500000 AA    0.664775074853  -1.646602408454  -0.689401380996 Bohr
[INPUT]  4 H      0.522422740000   0.213180490000   1.019583090000 AA    0.987235899845   0.402852741201   1.926732801338 Bohr
[INPUT]  5 H      0.600223970000   0.862293120000  -0.634545610000 AA    1.134258916699   1.629497835897  -1.199117416445 Bohr
[INPUT]  6 O     -1.818966980000  -0.158320460000  -0.005980500000 AA   -3.437349421827  -0.299182309315  -0.011301507088 Bohr
[INPUT]  7 H     -2.744889580000   0.095519520000  -0.008284500000 AA   -5.187089548372   0.180505732350  -0.015655436079 Bohr

nuclear repulsion = 67.4307099775755
number of shells = 113
number of NR pGTOs = 471
number of NR cGTOs = 424
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.06


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444416/tmpsv1oh11m
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2adec0d08940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2adec0d088b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 1161880
init E= -215.247109045019
  HOMO = -0.364619756194219  LUMO = -0.0330962207294457
cycle= 1 E= -215.122181185683  delta_E= 0.125  |g|= 1.23  |ddm|= 1.39
  HOMO = 0.135767884740555  LUMO = 0.139870658631339
cycle= 2 E= -206.182399894818  delta_E= 8.94  |g|= 2.87  |ddm|=  461
  HOMO = -0.137811848395239  LUMO = 0.0222242314545475
cycle= 3 E= -215.197710078491  delta_E= -9.02  |g|= 1.01  |ddm|=  461
  HOMO = -0.204594906735951  LUMO = 0.0550631426417259
cycle= 4 E= -215.29695204466  delta_E= -0.0992  |g|= 0.779  |ddm|= 0.361
  HOMO = -0.0623819972578145  LUMO = 0.0904725952193976
cycle= 5 E= -215.361264080866  delta_E= -0.0643  |g|= 0.589  |ddm|= 0.342
  HOMO = 0.0483666452403572  LUMO = 0.103678886277025
cycle= 6 E= -215.430469696657  delta_E= -0.0692  |g|= 0.161  |ddm|= 1.32
  HOMO = 0.068793317995916  LUMO = 0.103250873295497
cycle= 7 E= -215.431243670481  delta_E= -0.000774  |g|= 0.124  |ddm|= 2.01
  HOMO = 0.0486081062837544  LUMO = 0.10023445935377
cycle= 8 E= -215.435134304956  delta_E= -0.00389  |g|= 0.0173  |ddm|= 1.68
  HOMO = 0.0510868954924267  LUMO = 0.100374710499978
cycle= 9 E= -215.435204285735  delta_E= -7e-05  |g|= 0.00208  |ddm|= 0.166
  HOMO = 0.0509060106527835  LUMO = 0.100334400624068
cycle= 10 E= -215.435205033496  delta_E= -7.48e-07  |g|= 0.000297  |ddm|= 0.00452
  HOMO = 0.0509328513034658  LUMO = 0.100325169312498
cycle= 11 E= -215.435205049724  delta_E= -1.62e-08  |g|= 2.7e-05  |ddm|= 0.00268
  HOMO = 0.0509367396517248  LUMO = 0.100322209139255
Extra cycle  E= -215.435205049482  delta_E= 2.43e-10  |g|= 4.4e-05  |ddm|= 0.000564
converged SCF energy = -215.435205049482
