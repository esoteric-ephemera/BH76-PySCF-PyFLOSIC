#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/fch3fcomp/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:28:41 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 28
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      0.000000000000   0.000000000000  -1.791371350000 AA    0.000000000000   0.000000000000  -3.385201238892 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000  -0.365617030000 AA    0.000000000000   0.000000000000  -0.690916053177 Bohr
[INPUT]  3 H     -0.511791130000   0.886448240000  -0.017586680000 AA   -0.967145068682   1.675144397203  -0.033234008640 Bohr
[INPUT]  4 H     -0.511791130000  -0.886448240000  -0.017586680000 AA   -0.967145068682  -1.675144397203  -0.033234008640 Bohr
[INPUT]  5 H      1.023582260000   0.000000000000  -0.017586680000 AA    1.934290137363   0.000000000000  -0.033234008640 Bohr
[INPUT]  6 F      0.000000000000   0.000000000000   2.209748410000 AA    0.000000000000   0.000000000000   4.175819299093 Bohr

nuclear repulsion = 64.3622301961202
number of shells = 99
number of NR pGTOs = 423
number of NR cGTOs = 378
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.38


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmpghg_53hj
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b8af1eb8940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b8af1eb88b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 994848
init E= -239.361528886426
  HOMO = -0.395788851283101  LUMO = -0.0165101674389864
cycle= 1 E= -239.425072241992  delta_E= -0.0635  |g|= 1.01  |ddm|= 1.22
  HOMO = 0.145157443076648  LUMO = 0.182645605618548
cycle= 2 E= -228.192899448346  delta_E= 11.2  |g|= 2.85  |ddm|=  666
  HOMO = -0.140570221849201  LUMO = 0.0890129414203869
cycle= 3 E= -239.355588875142  delta_E= -11.2  |g|= 1.17  |ddm|=  666
  HOMO = -0.190999183054461  LUMO = 0.0934353823347445
cycle= 4 E= -239.445845547009  delta_E= -0.0903  |g|= 0.909  |ddm|= 0.201
  HOMO = -0.189253318383863  LUMO = 0.0991203856154019
cycle= 5 E= -239.471016889849  delta_E= -0.0252  |g|= 0.844  |ddm|= 0.105
  HOMO = -0.148706771846483  LUMO = 0.112386949392031
cycle= 6 E= -239.548052727096  delta_E= -0.077  |g|= 0.592  |ddm|= 0.195
  HOMO = 0.0275357331161383  LUMO = 0.120970576192099
cycle= 7 E= -239.61218513387  delta_E= -0.0641  |g|= 0.0868  |ddm|= 0.723
  HOMO = 0.0181304472727197  LUMO = 0.119562068936639
cycle= 8 E= -239.613490455976  delta_E= -0.00131  |g|= 0.00853  |ddm|= 0.11
  HOMO = 0.0183447251602684  LUMO = 0.119410903499395
cycle= 9 E= -239.613486870515  delta_E= 3.59e-06  |g|= 0.00969  |ddm|= 0.0132
  HOMO = 0.0160108369908541  LUMO = 0.119339631387505
cycle= 10 E= -239.613499180352  delta_E= -1.23e-05  |g|= 0.00409  |ddm|= 0.0261
  HOMO = 0.0168579945568623  LUMO = 0.119415198564429
cycle= 11 E= -239.613502401366  delta_E= -3.22e-06  |g|= 0.000221  |ddm|= 0.00964
  HOMO = 0.0168035221496942  LUMO = 0.119409192227252
cycle= 12 E= -239.613502411324  delta_E= -9.96e-09  |g|= 2.2e-05  |ddm|= 0.000458
  HOMO = 0.0167940336530415  LUMO = 0.11940898520896
Extra cycle  E= -239.613502411075  delta_E= 2.49e-10  |g|= 4.52e-05  |ddm|= 0.000104
converged SCF energy = -239.613502411075
