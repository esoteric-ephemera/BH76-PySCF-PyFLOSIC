#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/ch3f/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:00:01 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 5
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      0.000000000000   0.000000000000   0.065566370000 AA    0.000000000000   0.000000000000   0.123902482282 Bohr
[INPUT]  2 F      0.000000000000   0.000000000000  -1.315628590000 AA    0.000000000000   0.000000000000  -2.486177716748 Bohr
[INPUT]  3 H      0.514916330000  -0.891861250000   0.416687410000 AA    0.973050840766  -1.685373503612   0.787425084454 Bohr
[INPUT]  4 H      0.514916330000   0.891861250000   0.416687410000 AA    0.973050840766   1.685373503612   0.787425084454 Bohr
[INPUT]  5 H     -1.029832670000   0.000000000000   0.416687410000 AA   -1.946101700430   0.000000000000   0.787425084454 Bohr

nuclear repulsion = 37.4230617142413
number of shells = 80
number of NR pGTOs = 330
number of NR cGTOs = 298
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.42


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmpprz6payo
max_memory 4000 MB (current use 75 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b04a7696940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b04a76968b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 832280
init E= -139.706133422414
  HOMO = -0.391144330213174  LUMO = -0.010902960239272
cycle= 1 E= -139.708120305141  delta_E= -0.00199  |g|= 0.44  |ddm|= 1.17
  HOMO = -0.213056006544609  LUMO = 0.0144162288175179
cycle= 2 E= -139.652791005092  delta_E= 0.0553  |g|= 0.763  |ddm|= 0.57
  HOMO = -0.306397582323315  LUMO = 0.0123838472359935
cycle= 3 E= -139.737712201253  delta_E= -0.0849  |g|= 0.0546  |ddm|= 0.363
  HOMO = -0.31056673169458  LUMO = 0.0107221261124342
cycle= 4 E= -139.738272588698  delta_E= -0.00056  |g|= 0.0209  |ddm|= 0.0336
  HOMO = -0.310141412584488  LUMO = 0.0108807768170814
cycle= 5 E= -139.738352412198  delta_E= -7.98e-05  |g|= 0.00372  |ddm|= 0.0113
  HOMO = -0.310680992093803  LUMO = 0.0108211266722352
cycle= 6 E= -139.738354800628  delta_E= -2.39e-06  |g|= 0.000171  |ddm|= 0.00276
  HOMO = -0.310712157278688  LUMO = 0.0108253987169664
cycle= 7 E= -139.738354806919  delta_E= -6.29e-09  |g|= 3.16e-05  |ddm|= 0.000384
  HOMO = -0.310713320449416  LUMO = 0.0108267418330958
Extra cycle  E= -139.738354806934  delta_E= -1.54e-11  |g|= 2.86e-05  |ddm|= 5.61e-05
converged SCF energy = -139.738354806934
