#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/clch3clcomp/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:09:33 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 44
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Cl     0.000000000000   0.000000000000  -2.218072450000 AA    0.000000000000   0.000000000000  -4.191549454943 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000  -0.399665970000 AA    0.000000000000   0.000000000000  -0.755259224609 Bohr
[INPUT]  3 H     -0.512531980000   0.887731430000  -0.057714280000 AA   -0.968545072281   1.677569274869  -0.109064182676 Bohr
[INPUT]  4 H     -0.512531980000  -0.887731430000  -0.057714280000 AA   -0.968545072281  -1.677569274869  -0.109064182676 Bohr
[INPUT]  5 H      1.025063960000   0.000000000000  -0.057714280000 AA    1.937090144562   0.000000000000  -0.109064182676 Bohr
[INPUT]  6 Cl     0.000000000000   0.000000000000   2.790881250000 AA    0.000000000000   0.000000000000   5.274001208684 Bohr

nuclear repulsion = 107.042225925147
number of shells = 99
number of NR pGTOs = 461
number of NR cGTOs = 386
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.33


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmpgzozctjx
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b7ab0fb4940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b7ab0fb48b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 963600
init E= -960.117340758229
  HOMO = -0.331864143031501  LUMO = -0.0605774954516719
cycle= 1 E= -960.291608783206  delta_E= -0.174  |g|= 0.462  |ddm|=  1.6
  HOMO = 0.106566728067996  LUMO = 0.112393388467596
cycle= 2 E= -959.985089770038  delta_E= 0.307  |g|= 1.04  |ddm|= 24.8
  HOMO = -0.0509110282227052  LUMO = 0.106717066968492
cycle= 3 E= -960.364671276624  delta_E= -0.38  |g|= 0.146  |ddm|= 24.8
  HOMO = -0.0217597259979955  LUMO = 0.104711487255473
cycle= 4 E= -960.371585137555  delta_E= -0.00691  |g|= 0.0391  |ddm|= 0.199
  HOMO = -0.0219807686125635  LUMO = 0.106319449971188
cycle= 5 E= -960.371819294924  delta_E= -0.000234  |g|= 0.0147  |ddm|= 0.0804
  HOMO = -0.0223654302942293  LUMO = 0.10682555826173
cycle= 6 E= -960.371861462977  delta_E= -4.22e-05  |g|= 0.00667  |ddm|= 0.019
  HOMO = -0.0229190476152657  LUMO = 0.106769713545971
cycle= 7 E= -960.371871129697  delta_E= -9.67e-06  |g|= 0.00162  |ddm|= 0.00922
  HOMO = -0.0228480490025811  LUMO = 0.106786746478068
cycle= 8 E= -960.371871716143  delta_E= -5.86e-07  |g|= 0.000396  |ddm|= 0.00156
  HOMO = -0.0229103520142072  LUMO = 0.106786883534723
cycle= 9 E= -960.371871739871  delta_E= -2.37e-08  |g|= 7.6e-05  |ddm|= 0.000744
  HOMO = -0.0228974087735058  LUMO = 0.106785178463912
Extra cycle  E= -960.371871739329  delta_E= 5.42e-10  |g|= 8.13e-05  |ddm|= 0.000151
converged SCF energy = -960.371871739329
