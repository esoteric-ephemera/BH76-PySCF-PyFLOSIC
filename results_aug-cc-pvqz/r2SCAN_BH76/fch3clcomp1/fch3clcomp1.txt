#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/fch3clcomp1/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:17:18 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 36
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Cl     0.000000000000   0.000000000000   2.122964310000 AA    0.000000000000   0.000000000000   4.011821118126 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000   0.272465870000 AA    0.000000000000   0.000000000000   0.514885872591 Bohr
[INPUT]  3 H     -0.513161700000  -0.888822140000  -0.055314460000 AA   -0.969735070616  -1.679630418050  -0.104529180128 Bohr
[INPUT]  4 H     -0.513161700000   0.888822140000  -0.055314460000 AA   -0.969735070616   1.679630418050  -0.104529180128 Bohr
[INPUT]  5 H      1.026323400000   0.000000000000  -0.055314460000 AA    1.939470141232   0.000000000000  -0.104529180128 Bohr
[INPUT]  6 F      0.000000000000   0.000000000000  -2.229486810000 AA    0.000000000000   0.000000000000  -4.213119469230 Bohr

nuclear repulsion = 86.0762853695617
number of shells = 99
number of NR pGTOs = 442
number of NR cGTOs = 382
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.52


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmprwznkvs6
max_memory 4000 MB (current use 64 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b6368ce0940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b6368ce08b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 979224
init E= -599.698783620229
  HOMO = -0.333569584275594  LUMO = -0.0661489005210136
cycle= 1 E= -599.797380214581  delta_E= -0.0986  |g|= 0.933  |ddm|= 1.45
  HOMO = 0.140507126173362  LUMO = 0.142411997334937
cycle= 2 E= -588.182739432723  delta_E= 11.6  |g|= 2.88  |ddm|=  585
  HOMO = -0.11533529317331  LUMO = 0.091613307563441
cycle= 3 E= -599.83336048689  delta_E= -11.7  |g|= 0.777  |ddm|=  585
  HOMO = -0.169966662065996  LUMO = 0.0840869403409284
cycle= 4 E= -599.847138644975  delta_E= -0.0138  |g|= 0.781  |ddm|= 0.255
  HOMO = -0.138191022736718  LUMO = 0.104470029494548
cycle= 5 E= -599.925618316403  delta_E= -0.0785  |g|= 0.435  |ddm|= 0.228
  HOMO = -0.0948303771395701  LUMO = 0.11137187214653
cycle= 6 E= -599.928815013213  delta_E= -0.0032  |g|= 0.514  |ddm|= 0.239
  HOMO = 0.00800124080849244  LUMO = 0.116129680612477
cycle= 7 E= -599.973000290743  delta_E= -0.0442  |g|= 0.055  |ddm|= 0.445
  HOMO = 0.0114163464038941  LUMO = 0.116624253775012
cycle= 8 E= -599.973215381274  delta_E= -0.000215  |g|= 0.0518  |ddm|= 0.071
  HOMO = 0.00134366770788718  LUMO = 0.116347058700667
cycle= 9 E= -599.973793910703  delta_E= -0.000579  |g|= 0.00613  |ddm|= 0.0895
  HOMO = 0.00262806250532917  LUMO = 0.116296050397499
cycle= 10 E= -599.973800041937  delta_E= -6.13e-06  |g|= 0.00372  |ddm|= 0.0118
  HOMO = 0.00213723723030343  LUMO = 0.116309486980119
cycle= 11 E= -599.973802564845  delta_E= -2.52e-06  |g|= 0.000169  |ddm|= 0.00408
  HOMO = 0.0021172394888109  LUMO = 0.116317054264651
cycle= 12 E= -599.973802571987  delta_E= -7.14e-09  |g|= 3.81e-05  |ddm|= 0.000291
  HOMO = 0.00209665815640139  LUMO = 0.116316436246859
Extra cycle  E= -599.973802570518  delta_E= 1.47e-09  |g|= 0.000101  |ddm|= 0.000169
converged SCF energy = -599.973802570518
