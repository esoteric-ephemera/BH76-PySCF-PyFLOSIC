#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/fch3clcomp2/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:21:29 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 36
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      0.000000000000   0.000000000000  -1.889936260000 AA    0.000000000000   0.000000000000  -3.571461924285 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000  -0.481562760000 AA    0.000000000000   0.000000000000  -0.910021728190 Bohr
[INPUT]  3 H     -0.512360000000   0.887433540000  -0.127802480000 AA   -0.968220077182   1.677006344353  -0.241511685240 Bohr
[INPUT]  4 H     -0.512360000000  -0.887433540000  -0.127802480000 AA   -0.968220077182  -1.677006344353  -0.241511685240 Bohr
[INPUT]  5 H      1.024719990000   0.000000000000  -0.127802480000 AA    1.936440135467   0.000000000000  -0.241511685240 Bohr
[INPUT]  6 Cl     0.000000000000   0.000000000000   2.754906460000 AA    0.000000000000   0.000000000000   5.206018708195 Bohr

nuclear repulsion = 79.9097137776205
number of shells = 99
number of NR pGTOs = 442
number of NR cGTOs = 382
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.37


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmpfyywnbth
max_memory 4000 MB (current use 60 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b55ca20b940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b55ca20b8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 979224
init E= -599.777139018963
  HOMO = -0.339258412507647  LUMO = -0.0161387631350007
cycle= 1 E= -599.91886601379  delta_E= -0.142  |g|= 0.598  |ddm|= 1.38
  HOMO = 0.10569236823641  LUMO = 0.11914311288011
cycle= 2 E= -599.746088342407  delta_E= 0.173  |g|= 1.05  |ddm|= 10.7
  HOMO = -0.0309550601189445  LUMO = 0.107605070502092
cycle= 3 E= -600.011850328001  delta_E= -0.266  |g|= 0.0838  |ddm|= 10.6
  HOMO = -0.0140588537023301  LUMO = 0.109580384852416
cycle= 4 E= -600.013801867331  delta_E= -0.00195  |g|= 0.0294  |ddm|= 0.104
  HOMO = -0.0148581783993174  LUMO = 0.111228598098118
cycle= 5 E= -600.013972875139  delta_E= -0.000171  |g|= 0.00717  |ddm|= 0.0401
  HOMO = -0.0163640944014911  LUMO = 0.111541969536052
cycle= 6 E= -600.013982141892  delta_E= -9.27e-06  |g|= 0.00286  |ddm|= 0.019
  HOMO = -0.0159958437573248  LUMO = 0.111528114327469
cycle= 7 E= -600.013983250537  delta_E= -1.11e-06  |g|= 0.0013  |ddm|= 0.0036
  HOMO = -0.0163215645688492  LUMO = 0.111508085592061
cycle= 8 E= -600.013983668268  delta_E= -4.18e-07  |g|= 0.000117  |ddm|= 0.00194
  HOMO = -0.0163291924946335  LUMO = 0.11151056548199
cycle= 9 E= -600.013983669922  delta_E= -1.65e-09  |g|= 1.34e-05  |ddm|= 0.000221
  HOMO = -0.0163307203336659  LUMO = 0.11151049681188
Extra cycle  E= -600.013983669918  delta_E= 4.32e-12  |g|= 1.4e-05  |ddm|= 3.32e-05
converged SCF energy = -600.013983669918
