#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/C2H6/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 13:39:40 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -0.763094760000   0.000000330000  -0.000000930000 AA   -1.442040103491   0.000000623610  -0.000001757445 Bohr
[INPUT]  2 C      0.763094760000   0.000000330000  -0.000000930000 AA    1.442040103491   0.000000623610  -0.000001757445 Bohr
[INPUT]  3 H      1.158310790000  -0.443641770000  -0.914096410000 AA    2.188890160229  -0.838361442717  -1.727391866348 Bohr
[INPUT]  4 H     -1.158310790000  -1.013326470000  -0.074640850000 AA   -2.188890160229  -1.914909503072  -0.141050764205 Bohr
[INPUT]  5 H      1.158310790000  -0.569812440000   0.841253310000 AA    2.188890160229  -1.076789453970   1.589738357284 Bohr
[INPUT]  6 H      1.158310790000   1.013454140000   0.072847200000 AA    2.188890160229   1.915150764407   0.137661256941 Bohr
[INPUT]  7 H     -1.158310790000   0.442020500000   0.914883040000 AA   -2.188890160229   0.835297686443   1.728878381610 Bohr
[INPUT]  8 H     -1.158310790000   0.571305380000  -0.840244440000 AA   -2.188890160229   1.079610701691  -1.587831869289 Bohr

nuclear repulsion = 42.2953033050174
number of shells = 122
number of NR pGTOs = 474
number of NR cGTOs = 436
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.18


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmp3r_nou5u
max_memory 4000 MB (current use 60 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ae901d05940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ae901d058b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 1339424
init E= -79.6079425919907
  HOMO = -0.39825263749556  LUMO = -0.01028158161886
cycle= 1 E= -79.7595618100364  delta_E= -0.152  |g|= 0.407  |ddm|= 1.48
  HOMO = -0.2387713654926  LUMO = 0.0231563638705571
cycle= 2 E= -79.7238403654426  delta_E= 0.0357  |g|= 0.552  |ddm|= 0.613
  HOMO = -0.308714448309234  LUMO = 0.0125832877900475
cycle= 3 E= -79.8043517642165  delta_E= -0.0805  |g|= 0.0232  |ddm|= 0.344
  HOMO = -0.310582694322711  LUMO = 0.0121411326333726
cycle= 4 E= -79.8044666750009  delta_E= -0.000115  |g|= 0.0033  |ddm|= 0.0253
  HOMO = -0.311039696685124  LUMO = 0.0120246380876803
cycle= 5 E= -79.8044691018563  delta_E= -2.43e-06  |g|= 0.000401  |ddm|= 0.0102
  HOMO = -0.311180256801836  LUMO = 0.0120211368336643
cycle= 6 E= -79.8044691443659  delta_E= -4.25e-08  |g|= 3.7e-05  |ddm|= 0.00189
  HOMO = -0.311188406253851  LUMO = 0.0120250994172627
Extra cycle  E= -79.8044691443528  delta_E= 1.32e-11  |g|= 4e-05  |ddm|= 0.000199
converged SCF energy = -79.8044691443528
