#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/fch3clts/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:24:45 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 36
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      0.000000000000   0.000000000000  -1.996808890000 AA    0.000000000000   0.000000000000  -3.773421925197 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000   0.052747510000 AA    0.000000000000   0.000000000000   0.099678347653 Bohr
[INPUT]  3 H     -0.531042600000   0.919792760000  -0.073852860000 AA   -1.003525074477   1.738156407758  -0.139561678916 Bohr
[INPUT]  4 H     -0.531042600000  -0.919792760000  -0.073852860000 AA   -1.003525074477  -1.738156407758  -0.139561678916 Bohr
[INPUT]  5 H      1.062085200000   0.000000000000  -0.073852860000 AA    2.007050148954   0.000000000000  -0.139561678916 Bohr
[INPUT]  6 Cl     0.000000000000   0.000000000000   2.165619970000 AA    0.000000000000   0.000000000000   4.092428633189 Bohr

nuclear repulsion = 86.1007145466006
number of shells = 99
number of NR pGTOs = 442
number of NR cGTOs = 382
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.42


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmp6meq4i02
max_memory 4000 MB (current use 66 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b125c956940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b125c9568b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 979224
init E= -599.617478381941
  HOMO = -0.337096902387946  LUMO = -0.109639127374765
cycle= 1 E= -599.816388312353  delta_E= -0.199  |g|= 0.885  |ddm|= 1.35

WARN: HOMO 0.139482720937889 == LUMO 0.139482726638463

cycle= 2 E= -589.837827921102  delta_E= 9.98  |g|= 3.64  |ddm|=  633
  HOMO = -0.0429686665319631  LUMO = 0.110530165171142
cycle= 3 E= -599.927697957262  delta_E= -10.1  |g|= 0.364  |ddm|=  633
  HOMO = -0.0960334240268286  LUMO = 0.110534952983846
cycle= 4 E= -599.94467049226  delta_E= -0.017  |g|= 0.363  |ddm|= 0.518
  HOMO = -0.0707778950439852  LUMO = 0.117537233701921
cycle= 5 E= -599.969347599285  delta_E= -0.0247  |g|= 0.157  |ddm|= 0.251
  HOMO = -0.0476917528192039  LUMO = 0.121864646191869
cycle= 6 E= -599.974378788349  delta_E= -0.00503  |g|= 0.0483  |ddm|= 0.107
  HOMO = -0.046491917213405  LUMO = 0.121808186689907
cycle= 7 E= -599.97470038464  delta_E= -0.000322  |g|= 0.0173  |ddm|= 0.0215
  HOMO = -0.0442217620161033  LUMO = 0.122001475924448
cycle= 8 E= -599.974752285944  delta_E= -5.19e-05  |g|= 0.00492  |ddm|= 0.0131
  HOMO = -0.0437768596045795  LUMO = 0.122063162060053
cycle= 9 E= -599.974756988142  delta_E= -4.7e-06  |g|= 0.00212  |ddm|= 0.0052
  HOMO = -0.0435374857786303  LUMO = 0.122071053123402
cycle= 10 E= -599.974757735198  delta_E= -7.47e-07  |g|= 0.000189  |ddm|= 0.00143
  HOMO = -0.043504499503003  LUMO = 0.12207794607932
cycle= 11 E= -599.974757743613  delta_E= -8.42e-09  |g|= 2e-05  |ddm|= 0.000431
  HOMO = -0.0435046149588466  LUMO = 0.122076948511274
Extra cycle  E= -599.974757743645  delta_E= -3.24e-11  |g|= 1.19e-05  |ddm|= 4.49e-05
converged SCF energy = -599.974757743645
