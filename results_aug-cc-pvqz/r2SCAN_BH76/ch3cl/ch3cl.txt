#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/ch3cl/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 16:58:29 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 5
[INPUT] num. electrons = 26
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      0.000000000000   0.000000000000  -0.149916970000 AA    0.000000000000   0.000000000000  -0.283302014725 Bohr
[INPUT]  2 Cl     0.000000000000   0.000000000000   1.632801800000 AA    0.000000000000   0.000000000000   3.085548217697 Bohr
[INPUT]  3 H     -0.513997800000  -0.890270300000  -0.494294940000 AA   -0.971315070629  -1.682367043834  -0.934082061358 Bohr
[INPUT]  4 H     -0.513997800000   0.890270300000  -0.494294940000 AA   -0.971315070629   1.682367043834  -0.934082061358 Bohr
[INPUT]  5 H      1.027995600000   0.000000000000  -0.494294940000 AA    1.942630141258   0.000000000000  -0.934082061358 Bohr

nuclear repulsion = 51.3784915225676
number of shells = 80
number of NR pGTOs = 349
number of NR cGTOs = 302
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.32


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmpj2n4xb27
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b4ba8bc7940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b4ba8bc78b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 816656
init E= -500.0445152617
  HOMO = -0.331198867983981  LUMO = -0.0531194658635465
cycle= 1 E= -500.082069014679  delta_E= -0.0376  |g|= 0.202  |ddm|= 1.44
  HOMO = -0.235523169167383  LUMO = 0.00568375912531146
cycle= 2 E= -500.083481448213  delta_E= -0.00141  |g|= 0.197  |ddm|= 0.365
  HOMO = -0.26864120603995  LUMO = -0.0105772909821971
cycle= 3 E= -500.092976112986  delta_E= -0.00949  |g|= 0.0302  |ddm|= 0.164
  HOMO = -0.272488029377812  LUMO = -0.0108147730874229
cycle= 4 E= -500.093137649923  delta_E= -0.000162  |g|= 0.0163  |ddm|= 0.0396
  HOMO = -0.270668542316507  LUMO = -0.0104339370460778
cycle= 5 E= -500.093200377382  delta_E= -6.27e-05  |g|= 0.00299  |ddm|= 0.0157
  HOMO = -0.271284435350264  LUMO = -0.0106293209462606
cycle= 6 E= -500.093202618446  delta_E= -2.24e-06  |g|= 0.000557  |ddm|= 0.00383
  HOMO = -0.271225379816825  LUMO = -0.010614511695219
cycle= 7 E= -500.093202688649  delta_E= -7.02e-08  |g|= 0.000151  |ddm|= 0.000712
  HOMO = -0.271266047978687  LUMO = -0.0106336181239203
Extra cycle  E= -500.093202688903  delta_E= -2.54e-10  |g|= 0.000141  |ddm|= 0.000271
converged SCF energy = -500.093202688903
