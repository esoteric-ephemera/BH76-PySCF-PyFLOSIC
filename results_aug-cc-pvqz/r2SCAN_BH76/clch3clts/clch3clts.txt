#INFO: **** input file is /home/tuf53878/BH76/r2SCAN_BH76/clch3clts/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e067', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:12:57 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 44
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Cl    -0.000274640000   0.019242910000   2.322537350000 AA   -0.000518994383   0.036363829740   4.388959505573 Bohr
[INPUT]  2 C      0.000213360000   0.000202910000  -0.000052390000 AA    0.000403191966   0.000383444328  -0.000099002752 Bohr
[INPUT]  3 H      0.760980040000  -0.751016270000   0.006413620000 AA    1.438043861861  -1.419215065392   0.012119985267 Bohr
[INPUT]  4 H     -1.030750620000  -0.283007150000   0.002183610000 AA   -1.947836374526  -0.534806004794   0.004126424863 Bohr
[INPUT]  5 H      0.270428500000   1.034644730000  -0.008660410000 AA    0.511035801277   1.955195175925  -0.016365803026 Bohr
[INPUT]  6 Cl    -0.000596640000  -0.020067130000  -2.322421790000 AA   -0.001127486195  -0.037921379806  -4.388741128822 Bohr

nuclear repulsion = 110.279564127181
number of shells = 99
number of NR pGTOs = 461
number of NR cGTOs = 386
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.38


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444418/tmpo4msbho7
max_memory 4000 MB (current use 69 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_R2SCAN, MGGA_C_R2SCAN
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 8208 (2020)
    J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun, J. Phys. Chem. Lett. 11, 9248 (2020)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b4ff6152940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b4ff61528b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 963600
init E= -959.989753931333
  HOMO = -0.325173074521566  LUMO = -0.131232438449507
cycle= 1 E= -960.29188512093  delta_E= -0.302  |g|= 0.435  |ddm|= 1.48
  HOMO = 0.0163896616181797  LUMO = 0.125217417498055
cycle= 2 E= -960.246349820162  delta_E= 0.0455  |g|= 0.645  |ddm|= 1.12
  HOMO = -0.0566726571733371  LUMO = 0.119272553692557
cycle= 3 E= -960.35513660318  delta_E= -0.109  |g|= 0.121  |ddm|= 0.695
  HOMO = -0.0683838242482317  LUMO = 0.10320001215692
cycle= 4 E= -960.359194842212  delta_E= -0.00406  |g|= 0.0155  |ddm|=  0.1
  HOMO = -0.0689038608769657  LUMO = 0.103407745967504
cycle= 5 E= -960.359232628248  delta_E= -3.78e-05  |g|= 0.00594  |ddm|= 0.0332
  HOMO = -0.0694630116274837  LUMO = 0.102833166171635
cycle= 6 E= -960.359241646553  delta_E= -9.02e-06  |g|= 0.000984  |ddm|= 0.00747
  HOMO = -0.0696487533132209  LUMO = 0.102702867779349
cycle= 7 E= -960.359241856129  delta_E= -2.1e-07  |g|= 0.0001  |ddm|= 0.00327
  HOMO = -0.0696654812859232  LUMO = 0.102685928915277
cycle= 8 E= -960.359241858201  delta_E= -2.07e-09  |g|= 3.59e-05  |ddm|= 0.000297
  HOMO = -0.0696663011729806  LUMO = 0.102686460058445
Extra cycle  E= -960.359241856687  delta_E= 1.51e-09  |g|= 7.55e-05  |ddm|= 0.000102
converged SCF energy = -960.359241856687
