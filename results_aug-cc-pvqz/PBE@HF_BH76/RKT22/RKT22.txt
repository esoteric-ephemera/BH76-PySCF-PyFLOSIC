#INFO: **** input file is /home/tuf53878/BH76/PBE@HF_BH76/RKT22/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile','init','chkfl']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    if dopts['init'] == 'chkfl':
        kscalc.chkfile = dopts['chkfl']
        kscalc.init_guess = 'chkfile'
    elif dopts['init'] == 'HF DM':
        from pyscf import scf
        if dopts['restricted']:
            hfcalc = scf.RHF(mol)
        else:
            hfcalc = scf.UHF(mol)

        hfcalc.max_cycle = dopts['max_cycle']
        hfcalc.conv_tol = dopts['tol']
        if 'levelshift' in dopts:
            hfcalc.level_shift = dopts['levelshift']
        hfcalc.kernel()
        kscalc.init_guess = hfcalc.make_rdm1()

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e069', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Tue May 10 09:38:34 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 13
[INPUT] num. electrons = 38
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -1.299620700000  -0.756667940000   0.012984350000 AA   -2.455927188816  -1.429895173839   0.024536865405 Bohr
[INPUT]  2 C     -1.205945740000   0.654005360000   0.019725330000 AA   -2.278907169686   1.235891014398   0.037275471417 Bohr
[INPUT]  3 C      0.000001580000   1.331550150000   0.186440400000 AA    0.000002985767   2.516265104624   0.352321294554 Bohr
[INPUT]  4 C      1.205948910000   0.654002180000   0.019717340000 AA    2.278913160118   1.235885005069   0.037260372505 Bohr
[INPUT]  5 C      1.299629150000  -0.756662650000   0.012992340000 AA    2.455943157001  -1.429885177188   0.024551964317 Bohr
[INPUT]  6 H      2.168797490000  -1.179364140000  -0.482557650000 AA    4.098433275744  -2.228675225733  -0.911901797814 Bohr
[INPUT]  7 H      1.032045390000  -1.306197350000   0.906308250000 AA    1.950283135220  -2.468355256133   1.712674376934 Bohr
[INPUT]  8 H      2.037132900000   1.233774070000  -0.365365000000 AA    3.849623260341   2.331495091890  -0.690439785502 Bohr
[INPUT]  9 H      0.000002580000   2.411103490000   0.119044380000 AA    0.000004875493   4.556325254083   0.224961274869 Bohr
[INPUT] 10 H     -2.037129740000   1.233774070000  -0.365341720000 AA   -3.849617288806   2.331495091890  -0.690395792678 Bohr
[INPUT] 11 H     -2.168794330000  -1.179353560000  -0.482576700000 AA   -4.098427304210  -2.228655232431  -0.911937797096 Bohr
[INPUT] 12 H     -0.000009420000  -1.033755730000  -0.487668980000 AA   -0.000017801220  -1.953515209400  -0.921560811646 Bohr
[INPUT] 13 H     -1.032058100000  -1.306207930000   0.906297670000 AA   -1.950307153639  -2.468375249435   1.712654383631 Bohr

nuclear repulsion = 164.936618402503
number of shells = 207
number of NR pGTOs = 849
number of NR cGTOs = 768
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.57


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 0
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = ./wvfn
max_memory 4000 MB (current use 60 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = GGA_X_PBE, GGA_C_PBE
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 77, 3865 (1996)
    J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Rev. Lett. 78, 1396 (1997)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b73de92d940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b73de92d8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 2143048
init E= -195.022641239996
  HOMO = -0.214920172853011  LUMO = -0.0736328325251859
SCF not converged.
SCF energy = -195.022641239996
