#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/hfhts/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:49:33 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 11
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000   1.137217780000 AA    0.000000000000   0.000000000000   2.149030148186 Bohr
[INPUT]  2 F      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.137217780000 AA    0.000000000000   0.000000000000  -2.149030148186 Bohr

nuclear repulsion = 8.60853441987163
number of shells = 47
number of NR pGTOs = 189
number of NR cGTOs = 172
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.26


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpt8io_d7t
max_memory 4000 MB (current use 60 MB)
number electrons alpha = 6  beta = 5
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2af3cded6940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2af3cded68b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 507000
init E= -100.906103434879
  alpha nocc = 6  HOMO = -0.126850561933808  LUMO = -0.0155036453423429
  beta  nocc = 5  HOMO = -0.478352746133241  LUMO = -0.12685056193381

WARN: system HOMO -0.12685056193381 >= system LUMO -0.12685056193381

cycle= 1 E= -100.88982681648  delta_E= 0.0163  |g|= 0.289  |ddm|= 0.811
  alpha nocc = 6  HOMO = -0.182618908266681  LUMO = -0.0363209939186508
  beta  nocc = 5  HOMO = -0.309846156439346  LUMO = -0.106302691108205
cycle= 2 E= -100.840040648354  delta_E= 0.0498  |g|= 0.521  |ddm|= 0.342
  alpha nocc = 6  HOMO = -0.196531469042623  LUMO = -0.0638682538729525
  beta  nocc = 5  HOMO = -0.420129928483752  LUMO = -0.0826955781756602
cycle= 3 E= -100.918890431179  delta_E= -0.0788  |g|= 0.0161  |ddm|= 0.154
  alpha nocc = 6  HOMO = -0.190134300416802  LUMO = -0.0563283157724859
  beta  nocc = 5  HOMO = -0.412809659443073  LUMO = -0.0705622894168696
cycle= 4 E= -100.919056450668  delta_E= -0.000166  |g|= 0.00543  |ddm|= 0.041
  alpha nocc = 6  HOMO = -0.190954437506498  LUMO = -0.0561183056313044
  beta  nocc = 5  HOMO = -0.413429955553949  LUMO = -0.0690956142175506
cycle= 5 E= -100.919078551398  delta_E= -2.21e-05  |g|= 0.000919  |ddm|= 0.0157
  alpha nocc = 6  HOMO = -0.190861250709588  LUMO = -0.0557635705027098
  beta  nocc = 5  HOMO = -0.413230849707369  LUMO = -0.0688496275477301
cycle= 6 E= -100.91907912795  delta_E= -5.77e-07  |g|= 0.000125  |ddm|= 0.00497
  alpha nocc = 6  HOMO = -0.190856748938696  LUMO = -0.0557493455479542
  beta  nocc = 5  HOMO = -0.41324400620174  LUMO = -0.0688380188145506
cycle= 7 E= -100.919079136193  delta_E= -8.24e-09  |g|= 1.48e-05  |ddm|= 0.000558
  alpha nocc = 6  HOMO = -0.190860789784555  LUMO = -0.0557525250262425
  beta  nocc = 5  HOMO = -0.413254935680602  LUMO = -0.0688392430141266
Extra cycle  E= -100.919079136322  delta_E= -1.29e-10  |g|= 1.15e-05  |ddm|= 0.000153
converged SCF energy = -100.919079136322  <S^2> = 0.76101664  2S+1 = 2.0109865
