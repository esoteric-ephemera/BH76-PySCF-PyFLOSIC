#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/fch3clts/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:23:57 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 36
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      0.000000000000   0.000000000000  -1.996808890000 AA    0.000000000000   0.000000000000  -3.773421925197 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000   0.052747510000 AA    0.000000000000   0.000000000000   0.099678347653 Bohr
[INPUT]  3 H     -0.531042600000   0.919792760000  -0.073852860000 AA   -1.003525074477   1.738156407758  -0.139561678916 Bohr
[INPUT]  4 H     -0.531042600000  -0.919792760000  -0.073852860000 AA   -1.003525074477  -1.738156407758  -0.139561678916 Bohr
[INPUT]  5 H      1.062085200000   0.000000000000  -0.073852860000 AA    2.007050148954   0.000000000000  -0.139561678916 Bohr
[INPUT]  6 Cl     0.000000000000   0.000000000000   2.165619970000 AA    0.000000000000   0.000000000000   4.092428633189 Bohr

nuclear repulsion = 86.1007145466006
number of shells = 99
number of NR pGTOs = 442
number of NR cGTOs = 382
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.41


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmphbudruqu
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ae27260b940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ae27260b8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 979224
init E= -599.702460842281
  HOMO = -0.338732231264144  LUMO = -0.110017827614056
cycle= 1 E= -599.901996321882  delta_E= -0.2  |g|= 0.894  |ddm|= 1.33

WARN: HOMO 0.139301187161226 == LUMO 0.139301252944488

cycle= 2 E= -589.896486512017  delta_E=   10  |g|= 3.63  |ddm|=  633
  HOMO = -0.0420781982626259  LUMO = 0.109361179170656
cycle= 3 E= -600.012059297134  delta_E= -10.1  |g|= 0.378  |ddm|=  633
  HOMO = -0.102559351541761  LUMO = 0.109804216377773
cycle= 4 E= -600.030894433926  delta_E= -0.0188  |g|= 0.378  |ddm|= 0.526
  HOMO = -0.0747662532247791  LUMO = 0.115497180703806
cycle= 5 E= -600.056947014604  delta_E= -0.0261  |g|= 0.172  |ddm|= 0.259
  HOMO = -0.0484110865375935  LUMO = 0.121424236665861
cycle= 6 E= -600.063164306043  delta_E= -0.00622  |g|= 0.0506  |ddm|= 0.125
  HOMO = -0.0470601106527897  LUMO = 0.121392284842559
cycle= 7 E= -600.063520793208  delta_E= -0.000356  |g|= 0.0171  |ddm|= 0.0287
  HOMO = -0.0447462437691397  LUMO = 0.121592494656826
cycle= 8 E= -600.063572285162  delta_E= -5.15e-05  |g|= 0.00497  |ddm|= 0.0146
  HOMO = -0.044543693374567  LUMO = 0.121633157028921
cycle= 9 E= -600.063577493669  delta_E= -5.21e-06  |g|= 0.00224  |ddm|= 0.00506
  HOMO = -0.0442803679106163  LUMO = 0.121640560891192
cycle= 10 E= -600.063578336231  delta_E= -8.43e-07  |g|= 0.000213  |ddm|= 0.00157
  HOMO = -0.0442568156611047  LUMO = 0.121648057667766
cycle= 11 E= -600.063578348591  delta_E= -1.24e-08  |g|= 2.48e-05  |ddm|= 0.000447
  HOMO = -0.0442499308740663  LUMO = 0.121646641339545
Extra cycle  E= -600.06357834828  delta_E= 3.12e-10  |g|= 4.53e-05  |ddm|= 5.45e-05
converged SCF energy = -600.06357834828
