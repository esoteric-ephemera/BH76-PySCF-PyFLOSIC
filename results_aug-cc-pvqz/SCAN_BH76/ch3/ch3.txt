#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/ch3/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 16:56:22 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 4
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.538658120000   0.932983230000   0.000000000000 AA    1.017916321573   1.763082783512   0.000000000000 Bohr
[INPUT]  3 H      0.538658120000  -0.932983230000   0.000000000000 AA    1.017916321573  -1.763082783512   0.000000000000 Bohr
[INPUT]  4 H     -1.077316240000   0.000000000000   0.000000000000 AA   -2.035832643146   0.000000000000   0.000000000000 Bohr

nuclear repulsion = 9.6923737285082
number of shells = 61
number of NR pGTOs = 237
number of NR cGTOs = 218
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.48


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmp5ezh1dxd
max_memory 4000 MB (current use 60 MB)
number electrons alpha = 5  beta = 4
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2aea19afb940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2aea19afb8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 669712
init E= -39.6430440037087
  alpha nocc = 5  HOMO = -0.218677226145918  LUMO = 0.00505193122625349
  beta  nocc = 4  HOMO = -0.456076743850012  LUMO = -0.21867722614592

WARN: system HOMO -0.21867722614592 >= system LUMO -0.21867722614592

cycle= 1 E= -39.8212963971414  delta_E= -0.178  |g|= 0.172  |ddm|= 0.72
  alpha nocc = 5  HOMO = -0.163963983308453  LUMO = 0.0136457471131065
  beta  nocc = 4  HOMO = -0.337502462504665  LUMO = -0.0431724250297551
cycle= 2 E= -39.821859164933  delta_E= -0.000563  |g|= 0.17  |ddm|= 0.252
  alpha nocc = 5  HOMO = -0.221007768203966  LUMO = 0.00739092304380577
  beta  nocc = 4  HOMO = -0.384368920811165  LUMO = -0.0872485487414989
cycle= 3 E= -39.8373816158343  delta_E= -0.0155  |g|= 0.0208  |ddm|= 0.109
  alpha nocc = 5  HOMO = -0.219036565180728  LUMO = 0.0078484546543916
  beta  nocc = 4  HOMO = -0.38219769858502  LUMO = -0.0777935178325852
cycle= 4 E= -39.8376193574072  delta_E= -0.000238  |g|= 0.00166  |ddm|= 0.034
  alpha nocc = 5  HOMO = -0.218806959199461  LUMO = 0.00805102556360976
  beta  nocc = 4  HOMO = -0.381282096568872  LUMO = -0.0768032023376061
cycle= 5 E= -39.8376222372314  delta_E= -2.88e-06  |g|= 0.000485  |ddm|= 0.00395
  alpha nocc = 5  HOMO = -0.218795117332382  LUMO = 0.00804674028246595
  beta  nocc = 4  HOMO = -0.381260429395307  LUMO = -0.0766838231012014
cycle= 6 E= -39.8376225753989  delta_E= -3.38e-07  |g|= 7.7e-05  |ddm|= 0.00182
  alpha nocc = 5  HOMO = -0.218800001260078  LUMO = 0.00804667569178267
  beta  nocc = 4  HOMO = -0.381253787893044  LUMO = -0.0766794679178199
cycle= 7 E= -39.8376225832081  delta_E= -7.81e-09  |g|= 9.95e-06  |ddm|= 0.000268
  alpha nocc = 5  HOMO = -0.218804121766892  LUMO = 0.00804603330231187
  beta  nocc = 4  HOMO = -0.381259280888449  LUMO = -0.0766828724992857
Extra cycle  E= -39.8376225832801  delta_E= -7.2e-11  |g|= 5.21e-06  |ddm|= 5.9e-05
converged SCF energy = -39.8376225832801  <S^2> = 0.75637681  2S+1 = 2.0063667
