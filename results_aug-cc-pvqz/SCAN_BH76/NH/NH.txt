#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/NH/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:11:19 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 8
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 2
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 N      0.000000000000   0.000000000000   0.518366690000 AA    0.000000000000   0.000000000000   0.979571076197 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000  -0.518366690000 AA    0.000000000000   0.000000000000  -0.979571076197 Bohr

nuclear repulsion = 3.57299238926791
number of shells = 33
number of NR pGTOs = 141
number of NR cGTOs = 126
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.31


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmputqi0m5s
max_memory 4000 MB (current use 73 MB)
number electrons alpha = 5  beta = 3
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2adce75e1940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2adce75e18b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 327548
init E= -55.0690896708174
  alpha nocc = 5  HOMO = -0.235692842123241  LUMO = 0.0184683434331468
  beta  nocc = 3  HOMO = -0.368790667660405  LUMO = -0.235692842123244

WARN: system HOMO -0.235692842123242 >= system LUMO -0.235692842123244

cycle= 1 E= -55.2145208863961  delta_E= -0.145  |g|= 0.144  |ddm|= 0.54
  alpha nocc = 5  HOMO = -0.328000108027995  LUMO = -0.00858629612794596
  beta  nocc = 3  HOMO = -0.338397565918922  LUMO = -0.155452215784036
cycle= 2 E= -55.2235772278215  delta_E= -0.00906  |g|= 0.0515  |ddm|= 0.114
  alpha nocc = 5  HOMO = -0.302188328471628  LUMO = 0.000290221164845958
  beta  nocc = 3  HOMO = -0.319161770324135  LUMO = -0.121917425488532
cycle= 3 E= -55.2243790976173  delta_E= -0.000802  |g|= 0.0291  |ddm|= 0.0413
  alpha nocc = 5  HOMO = -0.314792934051697  LUMO = -0.000458505623343818
  beta  nocc = 3  HOMO = -0.329057299178367  LUMO = -0.130225346905042
cycle= 4 E= -55.2247320277485  delta_E= -0.000353  |g|= 0.00928  |ddm|= 0.0209
  alpha nocc = 5  HOMO = -0.312903936228538  LUMO = -0.000470379685327335
  beta  nocc = 3  HOMO = -0.326485775469722  LUMO = -0.127833623842522
cycle= 5 E= -55.2247770329976  delta_E= -4.5e-05  |g|= 0.00112  |ddm|= 0.00766
  alpha nocc = 5  HOMO = -0.313059385353513  LUMO = -0.000474440279457194
  beta  nocc = 3  HOMO = -0.326389326860088  LUMO = -0.12776661941164
cycle= 6 E= -55.2247784006766  delta_E= -1.37e-06  |g|= 0.000214  |ddm|= 0.00224
  alpha nocc = 5  HOMO = -0.31303434765837  LUMO = -0.000458230188198091
  beta  nocc = 3  HOMO = -0.32634711901416  LUMO = -0.127744540747218
cycle= 7 E= -55.2247784533143  delta_E= -5.26e-08  |g|= 3.58e-05  |ddm|= 0.000665
  alpha nocc = 5  HOMO = -0.313046239422589  LUMO = -0.000458606350528652
  beta  nocc = 3  HOMO = -0.326356272650317  LUMO = -0.127755891571939
Extra cycle  E= -55.2247784543972  delta_E= -1.08e-09  |g|= 1.67e-05  |ddm|= 9.25e-05
converged SCF energy = -55.2247784543972  <S^2> = 2.0091476  2S+1 = 3.0060922
