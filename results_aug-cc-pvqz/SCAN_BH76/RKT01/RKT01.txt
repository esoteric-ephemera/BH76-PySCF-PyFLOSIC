#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/RKT01/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:15:07 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 19
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000  -0.256615860000 AA    0.000000000000   0.000000000000  -0.484933694620 Bohr
[INPUT]  2 Cl     0.000000000000   0.000000000000   1.287264580000 AA    0.000000000000   0.000000000000   2.432577506053 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.030648720000 AA    0.000000000000   0.000000000000  -1.947643811434 Bohr

nuclear repulsion = 10.3916291213484
number of shells = 47
number of NR pGTOs = 208
number of NR cGTOs = 176
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.24


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpn7co64mu
max_memory 4000 MB (current use 62 MB)
number electrons alpha = 10  beta = 9
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b91d0985940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b91d09858b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 491376
init E= -461.249198996454
  alpha nocc = 10  HOMO = -0.284028879241305  LUMO = 0.0131238520488402
  beta  nocc = 9  HOMO = -0.348456680650389  LUMO = -0.284028879241305

WARN: system HOMO -0.284028879241305 >= system LUMO -0.284028879241305

cycle= 1 E= -461.3548791543  delta_E= -0.106  |g|= 0.128  |ddm|= 0.81
  alpha nocc = 10  HOMO = -0.275522308467324  LUMO = 0.0209099351235098
  beta  nocc = 9  HOMO = -0.263346837074773  LUMO = -0.211671097390349
cycle= 2 E= -461.353391153232  delta_E= 0.00149  |g|= 0.144  |ddm|= 0.468
  alpha nocc = 10  HOMO = -0.30790663766164  LUMO = 0.0186630574095382
  beta  nocc = 9  HOMO = -0.304182058302594  LUMO = -0.225656208724295
cycle= 3 E= -461.366295412533  delta_E= -0.0129  |g|= 0.0298  |ddm|= 0.179
  alpha nocc = 10  HOMO = -0.309176242037349  LUMO = 0.0192181281211858
  beta  nocc = 9  HOMO = -0.303048749204951  LUMO = -0.218493774614477
cycle= 4 E= -461.366762297802  delta_E= -0.000467  |g|= 0.0122  |ddm|= 0.099
  alpha nocc = 10  HOMO = -0.308445807942594  LUMO = 0.0195642717155505
  beta  nocc = 9  HOMO = -0.301397140488033  LUMO = -0.216391864095531
cycle= 5 E= -461.366833077322  delta_E= -7.08e-05  |g|= 0.004  |ddm|= 0.0126
  alpha nocc = 10  HOMO = -0.309145296194629  LUMO = 0.0195334400163056
  beta  nocc = 9  HOMO = -0.301843409874278  LUMO = -0.216876880468281
cycle= 6 E= -461.366839841154  delta_E= -6.76e-06  |g|= 0.0004  |ddm|= 0.00746
  alpha nocc = 10  HOMO = -0.309085307129722  LUMO = 0.0195426432246704
  beta  nocc = 9  HOMO = -0.301749412129855  LUMO = -0.216809983489862
cycle= 7 E= -461.366839931526  delta_E= -9.04e-08  |g|= 0.000116  |ddm|= 0.00186
  alpha nocc = 10  HOMO = -0.309122650927644  LUMO = 0.0195316630120289
  beta  nocc = 9  HOMO = -0.301787959584927  LUMO = -0.216839967647971
Extra cycle  E= -461.366839935354  delta_E= -3.83e-09  |g|= 5e-05  |ddm|= 0.000619
converged SCF energy = -461.366839935354  <S^2> = 0.75961237  2S+1 = 2.0095894
