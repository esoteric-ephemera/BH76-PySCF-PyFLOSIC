#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/hcots/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:42:43 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 15
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H     -1.086332800000   0.937979020000   0.000000000000 AA   -2.052871472132   1.772523458388   0.000000000000 Bohr
[INPUT]  2 C      0.543166400000   0.098476360000   0.000000000000 AA    1.026435736066   0.186093350144   0.000000000000 Bohr
[INPUT]  3 O      0.543166400000  -1.036455380000   0.000000000000 AA    1.026435736066  -1.958616808532   0.000000000000 Bohr

nuclear repulsion = 25.7664485811159
number of shells = 52
number of NR pGTOs = 234
number of NR cGTOs = 206
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.40


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpya768zn8
max_memory 4000 MB (current use 60 MB)
number electrons alpha = 8  beta = 7
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2aae703ad940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2aae703ad8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 482664
init E= -113.931154218907
  alpha nocc = 8  HOMO = -0.194744536085232  LUMO = -0.0805703554703398
  beta  nocc = 7  HOMO = -0.383107578466083  LUMO = -0.194744536085233

WARN: system HOMO -0.194744536085233 >= system LUMO -0.194744536085233

cycle= 1 E= -113.745013200185  delta_E= 0.186  |g|= 0.452  |ddm|= 0.815
  alpha nocc = 8  HOMO = -0.249493307002271  LUMO = -0.0303196936114566
  beta  nocc = 7  HOMO = -0.311761950489162  LUMO = -0.144786870682534
cycle= 2 E= -113.104031859684  delta_E= 0.641  |g|= 1.34  |ddm|= 0.648
  alpha nocc = 8  HOMO = -0.243873500902238  LUMO = -0.0635380103849461
  beta  nocc = 7  HOMO = -0.350216874591176  LUMO = -0.135141893472533
cycle= 3 E= -113.820511464071  delta_E= -0.716  |g|= 0.0714  |ddm|= 0.446
  alpha nocc = 8  HOMO = -0.251843025479062  LUMO = -0.0855696989366944
  beta  nocc = 7  HOMO = -0.37491866530587  LUMO = -0.137745401612981
cycle= 4 E= -113.822407522045  delta_E= -0.0019  |g|= 0.0352  |ddm|= 0.0826
  alpha nocc = 8  HOMO = -0.251803910800661  LUMO = -0.0749961635396237
  beta  nocc = 7  HOMO = -0.365445795230149  LUMO = -0.130039583854
cycle= 5 E= -113.823187809652  delta_E= -0.00078  |g|= 0.00674  |ddm|= 0.0303
  alpha nocc = 8  HOMO = -0.250878708821405  LUMO = -0.0745007955654909
  beta  nocc = 7  HOMO = -0.365026184581719  LUMO = -0.127442175928582
cycle= 6 E= -113.823224771197  delta_E= -3.7e-05  |g|= 0.00271  |ddm|= 0.0128
  alpha nocc = 8  HOMO = -0.251425356710647  LUMO = -0.0748092322839245
  beta  nocc = 7  HOMO = -0.365665801429208  LUMO = -0.127531238407642
cycle= 7 E= -113.823229987086  delta_E= -5.22e-06  |g|= 0.000957  |ddm|= 0.00289
  alpha nocc = 8  HOMO = -0.251420800099785  LUMO = -0.0746642327559036
  beta  nocc = 7  HOMO = -0.36553659900255  LUMO = -0.127393446824737
cycle= 8 E= -113.823230757577  delta_E= -7.7e-07  |g|= 0.000309  |ddm|= 0.00114
  alpha nocc = 8  HOMO = -0.251431107410693  LUMO = -0.0746755280110241
  beta  nocc = 7  HOMO = -0.365537506018925  LUMO = -0.127411885690601
cycle= 9 E= -113.823230854775  delta_E= -9.72e-08  |g|= 7.78e-05  |ddm|= 0.000468
  alpha nocc = 8  HOMO = -0.251430235153348  LUMO = -0.0746772069676937
  beta  nocc = 7  HOMO = -0.365539134696973  LUMO = -0.127420048729236
Extra cycle  E= -113.823230860031  delta_E= -5.26e-09  |g|= 4.74e-05  |ddm|= 9.6e-05
converged SCF energy = -113.823230860031  <S^2> = 0.76568697  2S+1 = 2.0156259
