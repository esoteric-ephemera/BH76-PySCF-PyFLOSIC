#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/C2H6/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 13:39:05 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C     -0.763094760000   0.000000330000  -0.000000930000 AA   -1.442040103491   0.000000623610  -0.000001757445 Bohr
[INPUT]  2 C      0.763094760000   0.000000330000  -0.000000930000 AA    1.442040103491   0.000000623610  -0.000001757445 Bohr
[INPUT]  3 H      1.158310790000  -0.443641770000  -0.914096410000 AA    2.188890160229  -0.838361442717  -1.727391866348 Bohr
[INPUT]  4 H     -1.158310790000  -1.013326470000  -0.074640850000 AA   -2.188890160229  -1.914909503072  -0.141050764205 Bohr
[INPUT]  5 H      1.158310790000  -0.569812440000   0.841253310000 AA    2.188890160229  -1.076789453970   1.589738357284 Bohr
[INPUT]  6 H      1.158310790000   1.013454140000   0.072847200000 AA    2.188890160229   1.915150764407   0.137661256941 Bohr
[INPUT]  7 H     -1.158310790000   0.442020500000   0.914883040000 AA   -2.188890160229   0.835297686443   1.728878381610 Bohr
[INPUT]  8 H     -1.158310790000   0.571305380000  -0.840244440000 AA   -2.188890160229   1.079610701691  -1.587831869289 Bohr

nuclear repulsion = 42.2953033050174
number of shells = 122
number of NR pGTOs = 474
number of NR cGTOs = 436
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.38


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpsn22rz0h
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ac2870e9940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ac2870e98b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 1339424
init E= -79.6118785600337
  HOMO = -0.400245321558141  LUMO = -0.0113217143753076
cycle= 1 E= -79.7673948241519  delta_E= -0.156  |g|= 0.427  |ddm|= 1.44
  HOMO = -0.234586888814073  LUMO = 0.0220450748576694
cycle= 2 E= -79.7290702160826  delta_E= 0.0383  |g|= 0.575  |ddm|= 0.729
  HOMO = -0.310058942159337  LUMO = 0.0112644265681792
cycle= 3 E= -79.8163173946738  delta_E= -0.0872  |g|= 0.0255  |ddm|= 0.373
  HOMO = -0.311847810734251  LUMO = 0.0109425710626881
cycle= 4 E= -79.8164507832203  delta_E= -0.000133  |g|= 0.00469  |ddm|= 0.0361
  HOMO = -0.312137832682787  LUMO = 0.0109053173786926
cycle= 5 E= -79.8164554813109  delta_E= -4.7e-06  |g|= 0.000354  |ddm|= 0.0149
  HOMO = -0.312223929103714  LUMO = 0.0109187054599998
cycle= 6 E= -79.8164555091729  delta_E= -2.79e-08  |g|= 3.2e-05  |ddm|= 0.00113
  HOMO = -0.312229687502716  LUMO = 0.0109227726454226
Extra cycle  E= -79.8164555092581  delta_E= -8.53e-11  |g|= 3.01e-05  |ddm|= 0.000183
converged SCF energy = -79.8164555092581
