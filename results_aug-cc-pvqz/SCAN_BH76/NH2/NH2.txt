#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/NH2/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:11:45 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 9
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 N      0.000000000000   0.000000000000   0.424246340000 AA    0.000000000000   0.000000000000   0.801709391949 Bohr
[INPUT]  2 H     -0.802312090000   0.000000000000  -0.212123170000 AA   -1.516150116527   0.000000000000  -0.400854695975 Bohr
[INPUT]  3 H      0.802312090000   0.000000000000  -0.212123170000 AA    1.516150116527   0.000000000000  -0.400854695975 Bohr

nuclear repulsion = 7.56430015711315
number of shells = 47
number of NR pGTOs = 189
number of NR cGTOs = 172
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.55


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpg7_jd0wv
max_memory 4000 MB (current use 62 MB)
number electrons alpha = 5  beta = 4
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b863ff21940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b863ff218b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 499764
init E= -55.7447304642012
  alpha nocc = 5  HOMO = -0.267433033960238  LUMO = 0.00214342641226007
  beta  nocc = 4  HOMO = -0.346694174734411  LUMO = -0.267433033960238

WARN: system HOMO -0.267433033960238 >= system LUMO -0.267433033960238

cycle= 1 E= -55.8696123894838  delta_E= -0.125  |g|= 0.174  |ddm|= 0.573
  alpha nocc = 5  HOMO = -0.248604053071353  LUMO = -0.00203516365241515
  beta  nocc = 4  HOMO = -0.228035132465526  LUMO = -0.105969303454647
cycle= 2 E= -55.8674322799279  delta_E= 0.00218  |g|= 0.188  |ddm|= 0.198
  alpha nocc = 5  HOMO = -0.303643468499699  LUMO = -0.00666461901137767
  beta  nocc = 4  HOMO = -0.284849355199622  LUMO = -0.148900303837189
cycle= 3 E= -55.8831221385729  delta_E= -0.0157  |g|= 0.0377  |ddm|= 0.108
  alpha nocc = 5  HOMO = -0.295513240527846  LUMO = -0.00400289802610793
  beta  nocc = 4  HOMO = -0.277465369093374  LUMO = -0.133363023513288
cycle= 4 E= -55.8837031409383  delta_E= -0.000581  |g|= 0.0065  |ddm|= 0.0188
  alpha nocc = 5  HOMO = -0.297192666859032  LUMO = -0.00431021075932706
  beta  nocc = 4  HOMO = -0.277283543130612  LUMO = -0.133399834654769
cycle= 5 E= -55.8837229676026  delta_E= -1.98e-05  |g|= 0.000854  |ddm|= 0.00351
  alpha nocc = 5  HOMO = -0.2971776426447  LUMO = -0.00421281303096522
  beta  nocc = 4  HOMO = -0.276966352573754  LUMO = -0.133083148233084
cycle= 6 E= -55.883723905102  delta_E= -9.37e-07  |g|= 0.000226  |ddm|= 0.00133
  alpha nocc = 5  HOMO = -0.29719994227968  LUMO = -0.00421431173745879
  beta  nocc = 4  HOMO = -0.276955516999536  LUMO = -0.133082383404362
cycle= 7 E= -55.8837239758411  delta_E= -7.07e-08  |g|= 3.83e-05  |ddm|= 0.000404
  alpha nocc = 5  HOMO = -0.297198665904276  LUMO = -0.0042128300048757
  beta  nocc = 4  HOMO = -0.27694989532779  LUMO = -0.133082690858207
Extra cycle  E= -55.8837239772133  delta_E= -1.37e-09  |g|= 1.4e-05  |ddm|= 6.41e-05
converged SCF energy = -55.8837239772133  <S^2> = 0.75536007  2S+1 = 2.0053529
