#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/n2o/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 18:08:33 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 22
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 N      0.000000000000   0.000000000000  -1.142726690000 AA    0.000000000000   0.000000000000  -2.159440479331 Bohr
[INPUT]  2 N      0.000000000000   0.000000000000  -0.022161590000 AA    0.000000000000   0.000000000000  -0.041879335585 Bohr
[INPUT]  3 O      0.000000000000   0.000000000000   1.164888280000 AA    0.000000000000   0.000000000000   2.201319814916 Bohr

nuclear repulsion = 60.9459711630959
number of shells = 57
number of NR pGTOs = 279
number of NR cGTOs = 240
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.33


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpbys5mdv8
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b5499532940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b54995328b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 468048
init E= -185.2722052885
  HOMO = -0.33956832589222  LUMO = -0.0274476532824486
cycle= 1 E= -184.585135217694  delta_E= 0.687  |g|= 0.756  |ddm|= 1.56
  HOMO = -0.265603088112254  LUMO = -0.0636474628519084
cycle= 2 E= -183.817552646345  delta_E= 0.768  |g|=  2.2  |ddm|= 1.11
  HOMO = -0.320417233823297  LUMO = -0.0369847596459639
cycle= 3 E= -184.567524500851  delta_E= -0.75  |g|= 0.747  |ddm|= 0.944
  HOMO = -0.312034015917083  LUMO = -0.0425406361630684
cycle= 4 E= -184.677634093972  delta_E= -0.11  |g|= 0.198  |ddm|= 0.419
  HOMO = -0.322066155509795  LUMO = -0.04953668936956
cycle= 5 E= -184.684863122432  delta_E= -0.00723  |g|= 0.0213  |ddm|= 0.08
  HOMO = -0.31899950925725  LUMO = -0.045779287095414
cycle= 6 E= -184.684952846276  delta_E= -8.97e-05  |g|= 0.00476  |ddm|= 0.0145
  HOMO = -0.319813380117441  LUMO = -0.0463422638506991
cycle= 7 E= -184.684956898617  delta_E= -4.05e-06  |g|= 0.000611  |ddm|= 0.00284
  HOMO = -0.319748041098624  LUMO = -0.0462618766421896
cycle= 8 E= -184.684956963195  delta_E= -6.46e-08  |g|= 0.000146  |ddm|= 0.00061
  HOMO = -0.319742133285114  LUMO = -0.046275760569515
Extra cycle  E= -184.684956892257  delta_E= 7.09e-08  |g|= 0.000602  |ddm|= 0.000368
converged SCF energy = -184.684956892257
