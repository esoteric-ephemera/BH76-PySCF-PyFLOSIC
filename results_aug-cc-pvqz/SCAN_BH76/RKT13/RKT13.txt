#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/RKT13/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 15:03:18 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 19
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000   1.485802710000 AA    0.000000000000   0.000000000000   2.807760197037 Bohr
[INPUT]  2 Cl     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.485802710000 AA    0.000000000000   0.000000000000  -2.807760197037 Bohr

nuclear repulsion = 12.2873741270401
number of shells = 47
number of NR pGTOs = 208
number of NR cGTOs = 176
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.69


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpwr4zmh8l
max_memory 4000 MB (current use 71 MB)
number electrons alpha = 10  beta = 9
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ab6d82b6940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ab6d82b68b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 491376
init E= -461.325953862817
  alpha nocc = 10  HOMO = -0.181034008532208  LUMO = -0.00133242968340409
  beta  nocc = 9  HOMO = -0.356803388897608  LUMO = -0.181034008532201

WARN: system HOMO -0.181034008532201 >= system LUMO -0.181034008532201

cycle= 1 E= -461.335686199863  delta_E= -0.00973  |g|= 0.134  |ddm|= 0.799
  alpha nocc = 10  HOMO = -0.228403420030747  LUMO = -0.0177405032370441
  beta  nocc = 9  HOMO = -0.278148700857779  LUMO = -0.124485915087605
cycle= 2 E= -461.340355686462  delta_E= -0.00467  |g|= 0.127  |ddm|= 0.305
  alpha nocc = 10  HOMO = -0.237391064326168  LUMO = -0.0284442219445091
  beta  nocc = 9  HOMO = -0.321195580992507  LUMO = -0.128483652789494
cycle= 3 E= -461.348553548409  delta_E= -0.0082  |g|= 0.029  |ddm|= 0.14
  alpha nocc = 10  HOMO = -0.234435818695643  LUMO = -0.0214308908380727
  beta  nocc = 9  HOMO = -0.312116168118572  LUMO = -0.115231083733105
cycle= 4 E= -461.348969866687  delta_E= -0.000416  |g|= 0.00801  |ddm|= 0.0324
  alpha nocc = 10  HOMO = -0.236736227111931  LUMO = -0.0217707749819928
  beta  nocc = 9  HOMO = -0.313552410652914  LUMO = -0.11383103220626
cycle= 5 E= -461.349005004618  delta_E= -3.51e-05  |g|= 0.00109  |ddm|= 0.0123
  alpha nocc = 10  HOMO = -0.236669727597751  LUMO = -0.0213548621255569
  beta  nocc = 9  HOMO = -0.313388355345328  LUMO = -0.113531369194059
cycle= 6 E= -461.349005796017  delta_E= -7.91e-07  |g|= 9.93e-05  |ddm|= 0.0034
  alpha nocc = 10  HOMO = -0.23667345849552  LUMO = -0.0213365150118047
  beta  nocc = 9  HOMO = -0.313378176471395  LUMO = -0.113532924427418
cycle= 7 E= -461.34900580173  delta_E= -5.71e-09  |g|= 1.09e-05  |ddm|= 0.000469
  alpha nocc = 10  HOMO = -0.236674358283933  LUMO = -0.0213372106122901
  beta  nocc = 9  HOMO = -0.313382025186563  LUMO = -0.113532772561376
Extra cycle  E= -461.349005801787  delta_E= -5.74e-11  |g|= 6.04e-06  |ddm|= 4.06e-05
converged SCF energy = -461.349005801787  <S^2> = 0.76936078  2S+1 = 2.019268
