#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/hco/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:41:35 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 15
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H     -0.608610630000   0.821034380000   0.000000000000 AA   -1.150107407199   1.551530117052   0.000000000000 Bohr
[INPUT]  2 C      0.304305320000   0.177798260000   0.000000000000 AA    0.575053713048   0.335990016824   0.000000000000 Bohr
[INPUT]  3 O      0.304305320000  -0.998832640000   0.000000000000 AA    0.575053713048  -1.887520133876   0.000000000000 Bohr

nuclear repulsion = 26.50984657439
number of shells = 52
number of NR pGTOs = 234
number of NR cGTOs = 206
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.20


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpckahs3ul
max_memory 4000 MB (current use 60 MB)
number electrons alpha = 8  beta = 7
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2afd87fe9940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2afd87fe98b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 482664
init E= -114.010407009939
  alpha nocc = 8  HOMO = -0.180688281659318  LUMO = -0.106978569058665
  beta  nocc = 7  HOMO = -0.455265046833015  LUMO = -0.180688281659316

WARN: system HOMO -0.180688281659316 >= system LUMO -0.180688281659316

cycle= 1 E= -113.778793794488  delta_E= 0.232  |g|= 0.473  |ddm|= 0.859
  alpha nocc = 8  HOMO = -0.112269734035741  LUMO = -0.0294186886103594
  beta  nocc = 7  HOMO = -0.271147563858193  LUMO = -0.05735855953271
cycle= 2 E= -113.062999018075  delta_E= 0.716  |g|= 1.38  |ddm|= 0.727
  alpha nocc = 8  HOMO = -0.178610621232523  LUMO = -0.0770362087324218
  beta  nocc = 7  HOMO = -0.347411082679649  LUMO = -0.0907558931434939
cycle= 3 E= -113.859871965646  delta_E= -0.797  |g|= 0.0659  |ddm|= 0.533
  alpha nocc = 8  HOMO = -0.203478091304525  LUMO = -0.0982624508344723
  beta  nocc = 7  HOMO = -0.369935138750903  LUMO = -0.108031531794547
cycle= 4 E= -113.861123561553  delta_E= -0.00125  |g|= 0.028  |ddm|= 0.0759
  alpha nocc = 8  HOMO = -0.19653559772679  LUMO = -0.0895161181084662
  beta  nocc = 7  HOMO = -0.360852613357552  LUMO = -0.0983950673065925
cycle= 5 E= -113.861500890778  delta_E= -0.000377  |g|= 0.00625  |ddm|= 0.0225
  alpha nocc = 8  HOMO = -0.19708232497688  LUMO = -0.0899261348660203
  beta  nocc = 7  HOMO = -0.361309456151947  LUMO = -0.0974458181502089
cycle= 6 E= -113.86151911825  delta_E= -1.82e-05  |g|= 0.00175  |ddm|= 0.00607
  alpha nocc = 8  HOMO = -0.197336063843649  LUMO = -0.090012432145907
  beta  nocc = 7  HOMO = -0.361094064222291  LUMO = -0.0969545973210502
cycle= 7 E= -113.861521401213  delta_E= -2.28e-06  |g|= 0.000726  |ddm|= 0.00365
  alpha nocc = 8  HOMO = -0.197367665238678  LUMO = -0.0899944179465522
  beta  nocc = 7  HOMO = -0.360972762525576  LUMO = -0.0967011943951101
cycle= 8 E= -113.861521911214  delta_E= -5.1e-07  |g|= 0.000257  |ddm|= 0.00168
  alpha nocc = 8  HOMO = -0.197372615907751  LUMO = -0.089994248268088
  beta  nocc = 7  HOMO = -0.360938706601995  LUMO = -0.0966163155437077
cycle= 9 E= -113.861522002925  delta_E= -9.17e-08  |g|= 8.63e-05  |ddm|= 0.000742
  alpha nocc = 8  HOMO = -0.197369788810453  LUMO = -0.0899835868034742
  beta  nocc = 7  HOMO = -0.360923192413404  LUMO = -0.0966096029297874
Extra cycle  E= -113.861522006778  delta_E= -3.85e-09  |g|= 9.69e-05  |ddm|= 0.000147
converged SCF energy = -113.861522006778  <S^2> = 0.75514532  2S+1 = 2.0051387
