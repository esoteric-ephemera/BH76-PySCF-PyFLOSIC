#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/RKT14/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 15:04:05 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 2
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000  -0.092564570000 AA    0.000000000000   0.000000000000  -0.174921686138 Bohr
[INPUT]  2 O      0.000000000000   0.000000000000   1.096748070000 AA    0.000000000000   0.000000000000   2.072553479945 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.004183500000 AA    0.000000000000   0.000000000000  -1.897631793807 Bohr

nuclear repulsion = 6.15504992898095
number of shells = 47
number of NR pGTOs = 189
number of NR cGTOs = 172
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.32


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmp6bh_9uhn
max_memory 4000 MB (current use 62 MB)
number electrons alpha = 6  beta = 4
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b1d01e96940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b1d01e968b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 501816
init E= -76.0703237538859
  alpha nocc = 6  HOMO = -0.267064818553599  LUMO = 0.0223272131723302

WARN: beta  nocc = 4  HOMO -0.363334179305166 >= LUMO -0.363334179305163


WARN: system HOMO -0.267064818553599 >= system LUMO -0.363334179305163

cycle= 1 E= -76.2085474591076  delta_E= -0.138  |g|= 0.252  |ddm|= 0.651
  alpha nocc = 6  HOMO = -0.224983266264929  LUMO = 0.0332323344750164
  beta  nocc = 4  HOMO = -0.189958851293362  LUMO = -0.162076747375871
cycle= 2 E= -76.151469205063  delta_E= 0.0571  |g|= 0.435  |ddm|= 0.394
  alpha nocc = 6  HOMO = -0.318225105997711  LUMO = 0.0264650352109167
  beta  nocc = 4  HOMO = -0.291854579823776  LUMO = -0.212818514682199
cycle= 3 E= -76.2395562404312  delta_E= -0.0881  |g|= 0.0452  |ddm|= 0.243
  alpha nocc = 6  HOMO = -0.309954902123705  LUMO = 0.0292163091788342
  beta  nocc = 4  HOMO = -0.278473474187301  LUMO = -0.190822104507856
cycle= 4 E= -76.2405316613465  delta_E= -0.000975  |g|= 0.011  |ddm|= 0.0595
  alpha nocc = 6  HOMO = -0.314303846203118  LUMO = 0.0292006687192773
  beta  nocc = 4  HOMO = -0.280947540402044  LUMO = -0.193161223128532
cycle= 5 E= -76.240585614021  delta_E= -5.4e-05  |g|= 0.00319  |ddm|= 0.00974
  alpha nocc = 6  HOMO = -0.314222478030551  LUMO = 0.0292380794268158
  beta  nocc = 4  HOMO = -0.280307576175392  LUMO = -0.192975802467149
cycle= 6 E= -76.2405907929951  delta_E= -5.18e-06  |g|= 0.000685  |ddm|= 0.0036
  alpha nocc = 6  HOMO = -0.314073455816253  LUMO = 0.0292490769592571
  beta  nocc = 4  HOMO = -0.280193764113272  LUMO = -0.192930444207636
cycle= 7 E= -76.2405910019404  delta_E= -2.09e-07  |g|= 0.00023  |ddm|= 0.0016
  alpha nocc = 6  HOMO = -0.314116561991601  LUMO = 0.02925243895453
  beta  nocc = 4  HOMO = -0.280211309495855  LUMO = -0.192952378692587
cycle= 8 E= -76.2405910285715  delta_E= -2.66e-08  |g|= 7.72e-05  |ddm|= 0.00065
  alpha nocc = 6  HOMO = -0.314110368519234  LUMO = 0.0292512046641554
  beta  nocc = 4  HOMO = -0.280216127216083  LUMO = -0.192955382658757
Extra cycle  E= -76.240591037909  delta_E= -9.34e-09  |g|= 6.17e-05  |ddm|= 0.000199
converged SCF energy = -76.240591037909  <S^2> = 2.0145965  2S+1 = 3.0097153
