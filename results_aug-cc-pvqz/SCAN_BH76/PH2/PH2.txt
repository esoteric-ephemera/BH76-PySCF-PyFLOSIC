#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/PH2/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:13:32 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 17
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 P      0.000000000000   0.000000000000   0.655389550000 AA    0.000000000000   0.000000000000   1.238506754402 Bohr
[INPUT]  2 H     -1.020132020000   0.000000000000  -0.327694780000 AA   -1.927770128699   0.000000000000  -0.619253386650 Bohr
[INPUT]  3 H      1.020132020000   0.000000000000  -0.327694780000 AA    1.927770128699   0.000000000000  -0.619253386650 Bohr

nuclear repulsion = 11.4649710254017
number of shells = 47
number of NR pGTOs = 208
number of NR cGTOs = 176
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.33


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpmrvxd854
max_memory 4000 MB (current use 62 MB)
number electrons alpha = 9  beta = 8
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2af1f6ed6940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2af1f6ed68b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 491376
init E= -342.401945475806
  alpha nocc = 9  HOMO = -0.217162015606944  LUMO = -0.0204481611441687
  beta  nocc = 8  HOMO = -0.311409376428007  LUMO = -0.217162015606944

WARN: system HOMO -0.217162015606944 >= system LUMO -0.217162015606944

cycle= 1 E= -342.540702440311  delta_E= -0.139  |g|= 0.0858  |ddm|= 0.892
  alpha nocc = 9  HOMO = -0.226737632568229  LUMO = 0.000867164377684819
  beta  nocc = 8  HOMO = -0.263386460398788  LUMO = -0.13785962021218
cycle= 2 E= -342.545496190113  delta_E= -0.00479  |g|= 0.0222  |ddm|= 0.246
  alpha nocc = 9  HOMO = -0.241300158228926  LUMO = -0.00271864123082341
  beta  nocc = 8  HOMO = -0.277275305685436  LUMO = -0.142820243965005
cycle= 3 E= -342.545844541342  delta_E= -0.000348  |g|= 0.0116  |ddm|= 0.0455
  alpha nocc = 9  HOMO = -0.237651186213002  LUMO = -0.00121665116396734
  beta  nocc = 8  HOMO = -0.273530959962927  LUMO = -0.135808597560573
cycle= 4 E= -342.545929667743  delta_E= -8.51e-05  |g|= 0.00446  |ddm|= 0.0186
  alpha nocc = 9  HOMO = -0.238561614010192  LUMO = -0.00120114097664543
  beta  nocc = 8  HOMO = -0.274079368279877  LUMO = -0.135984663706854
cycle= 5 E= -342.545938293962  delta_E= -8.63e-06  |g|= 0.00106  |ddm|= 0.00845
  alpha nocc = 9  HOMO = -0.23848812754627  LUMO = -0.00122986638560465
  beta  nocc = 8  HOMO = -0.273860345682579  LUMO = -0.135811276682911
cycle= 6 E= -342.545939242653  delta_E= -9.49e-07  |g|= 0.00025  |ddm|= 0.0016
  alpha nocc = 9  HOMO = -0.238483753664149  LUMO = -0.00124032113014687
  beta  nocc = 8  HOMO = -0.273889357186962  LUMO = -0.135780946430191
cycle= 7 E= -342.545939311795  delta_E= -6.91e-08  |g|= 4.47e-05  |ddm|= 0.000805
  alpha nocc = 9  HOMO = -0.238485601814237  LUMO = -0.00124054627361749
  beta  nocc = 8  HOMO = -0.273888590037899  LUMO = -0.135781812474933
Extra cycle  E= -342.545939314378  delta_E= -2.58e-09  |g|= 1.86e-05  |ddm|= 0.000101
converged SCF energy = -342.545939314378  <S^2> = 0.76034886  2S+1 = 2.0103222
