#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/N2H/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:09:21 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 15
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.624633060000  -0.704039640000   0.000000000000 AA    1.180385411749  -1.330442100437   0.000000000000 Bohr
[INPUT]  2 N     -0.312316530000  -0.237095750000   0.000000000000 AA   -0.590192705875  -0.448046032798   0.000000000000 Bohr
[INPUT]  3 N     -0.312316530000   0.941135390000   0.000000000000 AA   -0.590192705875   1.778488133236   0.000000000000 Bohr

nuclear repulsion = 27.5022642561215
number of shells = 52
number of NR pGTOs = 234
number of NR cGTOs = 206
basis = aug-cc-pvqz
ecp = {}
CPU time:         1.87


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpetw1bsfa
max_memory 4000 MB (current use 62 MB)
number electrons alpha = 8  beta = 7
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b2640e53940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b2640e538b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 482880
init E= -110.178906940788
  alpha nocc = 8  HOMO = -0.154535022536367  LUMO = -0.0913784159460906
  beta  nocc = 7  HOMO = -0.396065678594458  LUMO = -0.154535022536369

WARN: system HOMO -0.154535022536369 >= system LUMO -0.154535022536369

cycle= 1 E= -110.027133153832  delta_E= 0.152  |g|= 0.135  |ddm|= 0.889
  alpha nocc = 8  HOMO = -0.174753571501702  LUMO = -0.0781599600712122
  beta  nocc = 7  HOMO = -0.340788252206958  LUMO = -0.0875225362026591
cycle= 2 E= -110.025079086946  delta_E= 0.00205  |g|= 0.158  |ddm|= 0.213
  alpha nocc = 8  HOMO = -0.192893412058516  LUMO = -0.0923732791792214
  beta  nocc = 7  HOMO = -0.359320647339862  LUMO = -0.101268544988648
cycle= 3 E= -110.032457416216  delta_E= -0.00738  |g|= 0.106  |ddm|= 0.128
  alpha nocc = 8  HOMO = -0.196234310607626  LUMO = -0.094590803035329
  beta  nocc = 7  HOMO = -0.364139625088437  LUMO = -0.0974938442760236
cycle= 4 E= -110.036741979174  delta_E= -0.00428  |g|= 0.0279  |ddm|= 0.0515
  alpha nocc = 8  HOMO = -0.193201274908968  LUMO = -0.0885249606224493
  beta  nocc = 7  HOMO = -0.357711456345438  LUMO = -0.0894931961360752
cycle= 5 E= -110.03706710925  delta_E= -0.000325  |g|= 0.00683  |ddm|= 0.0198
  alpha nocc = 8  HOMO = -0.19512965613  LUMO = -0.0901348537879879
  beta  nocc = 7  HOMO = -0.359323505811758  LUMO = -0.0902151885367863
cycle= 6 E= -110.037087969014  delta_E= -2.09e-05  |g|= 0.00157  |ddm|= 0.00556
  alpha nocc = 8  HOMO = -0.194972964250931  LUMO = -0.0899165529277553
  beta  nocc = 7  HOMO = -0.359103275790592  LUMO = -0.0898090383659015
cycle= 7 E= -110.03708954184  delta_E= -1.57e-06  |g|= 0.000605  |ddm|= 0.00222
  alpha nocc = 8  HOMO = -0.195007302379662  LUMO = -0.0899857474129962
  beta  nocc = 7  HOMO = -0.359180235549011  LUMO = -0.0898217854046997
cycle= 8 E= -110.037089768541  delta_E= -2.27e-07  |g|= 0.000144  |ddm|= 0.000742
  alpha nocc = 8  HOMO = -0.194990677047771  LUMO = -0.089970898171379
  beta  nocc = 7  HOMO = -0.359173815569735  LUMO = -0.0898019282374686
cycle= 9 E= -110.03708978943  delta_E= -2.09e-08  |g|= 5.15e-05  |ddm|= 0.000214
  alpha nocc = 8  HOMO = -0.195001895820709  LUMO = -0.0899839349718673
  beta  nocc = 7  HOMO = -0.359186626030239  LUMO = -0.0898119466982201
Extra cycle  E= -110.0370897929  delta_E= -3.47e-09  |g|= 4.48e-05  |ddm|= 6.62e-05
converged SCF energy = -110.0370897929  <S^2> = 0.75648071  2S+1 = 2.0064702
