#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/clch3clcomp/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:08:47 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 6
[INPUT] num. electrons = 44
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Cl     0.000000000000   0.000000000000  -2.218072450000 AA    0.000000000000   0.000000000000  -4.191549454943 Bohr
[INPUT]  2 C      0.000000000000   0.000000000000  -0.399665970000 AA    0.000000000000   0.000000000000  -0.755259224609 Bohr
[INPUT]  3 H     -0.512531980000   0.887731430000  -0.057714280000 AA   -0.968545072281   1.677569274869  -0.109064182676 Bohr
[INPUT]  4 H     -0.512531980000  -0.887731430000  -0.057714280000 AA   -0.968545072281  -1.677569274869  -0.109064182676 Bohr
[INPUT]  5 H      1.025063960000   0.000000000000  -0.057714280000 AA    1.937090144562   0.000000000000  -0.109064182676 Bohr
[INPUT]  6 Cl     0.000000000000   0.000000000000   2.790881250000 AA    0.000000000000   0.000000000000   5.274001208684 Bohr

nuclear repulsion = 107.042225925147
number of shells = 99
number of NR pGTOs = 461
number of NR cGTOs = 386
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.14


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmp66kj13ke
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b237090f940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b237090f8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 963600
init E= -960.254401924594
  HOMO = -0.333763385724111  LUMO = -0.0632162689171115
cycle= 1 E= -960.430036294282  delta_E= -0.176  |g|= 0.475  |ddm|= 1.56
  HOMO = 0.106837024282942  LUMO = 0.112214580532861
cycle= 2 E= -960.123557437076  delta_E= 0.306  |g|= 1.05  |ddm|=   25
  HOMO = -0.0550960838116291  LUMO = 0.105709482583079
cycle= 3 E= -960.505157322301  delta_E= -0.382  |g|= 0.151  |ddm|=   25
  HOMO = -0.0222169912873914  LUMO = 0.104002178858888
cycle= 4 E= -960.512638384134  delta_E= -0.00748  |g|= 0.0399  |ddm|= 0.211
  HOMO = -0.0223933331510449  LUMO = 0.105873179494867
cycle= 5 E= -960.512891179294  delta_E= -0.000253  |g|= 0.0142  |ddm|= 0.0756
  HOMO = -0.0227437994399108  LUMO = 0.106367980111653
cycle= 6 E= -960.512931221266  delta_E= -4e-05  |g|= 0.00653  |ddm|= 0.0168
  HOMO = -0.0232272121234594  LUMO = 0.106318957127183
cycle= 7 E= -960.512940445356  delta_E= -9.22e-06  |g|= 0.00163  |ddm|= 0.00814
  HOMO = -0.023150422176748  LUMO = 0.106334769978363
cycle= 8 E= -960.512941046327  delta_E= -6.01e-07  |g|= 0.00036  |ddm|= 0.00154
  HOMO = -0.0232088706938309  LUMO = 0.106335719805388
cycle= 9 E= -960.512941067186  delta_E= -2.09e-08  |g|= 6.76e-05  |ddm|= 0.000649
  HOMO = -0.0231979463509268  LUMO = 0.106334054098166
Extra cycle  E= -960.512941066844  delta_E= 3.43e-10  |g|= 6.93e-05  |ddm|= 0.00012
converged SCF energy = -960.512941066844
