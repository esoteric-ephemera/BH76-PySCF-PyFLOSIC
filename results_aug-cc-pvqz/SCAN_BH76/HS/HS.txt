#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/HS/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:08:54 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 17
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 S      0.000000000000   0.000000000000   0.670101650000 AA    0.000000000000   0.000000000000   1.266308594119 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000  -0.670101650000 AA    0.000000000000   0.000000000000  -1.266308594119 Bohr

nuclear repulsion = 6.31757538182453
number of shells = 33
number of NR pGTOs = 160
number of NR cGTOs = 130
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.11


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmp8txy657w
max_memory 4000 MB (current use 60 MB)
number electrons alpha = 9  beta = 8
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b37056d2940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b37056d28b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 319160
init E= -398.723035666449
  alpha nocc = 9  HOMO = -0.278864055873559  LUMO = -0.0164197419001253

WARN: beta  nocc = 8  HOMO -0.278864055873567 >= LUMO -0.278864055873558


WARN: system HOMO -0.278864055873558 >= system LUMO -0.278864055873558

cycle= 1 E= -398.787180188355  delta_E= -0.0641  |g|= 0.0952  |ddm|= 0.754
  alpha nocc = 9  HOMO = -0.236438662460468  LUMO = -0.00935704294902677
  beta  nocc = 8  HOMO = -0.220183511526644  LUMO = -0.190032576941705
cycle= 2 E= -398.791746545567  delta_E= -0.00457  |g|= 0.0564  |ddm|= 0.184
  alpha nocc = 9  HOMO = -0.257386719172291  LUMO = -0.0122652448054233
  beta  nocc = 8  HOMO = -0.243088511789374  LUMO = -0.204068015656919
cycle= 3 E= -398.793418116855  delta_E= -0.00167  |g|= 0.0296  |ddm|= 0.0893
  alpha nocc = 9  HOMO = -0.25284558867599  LUMO = -0.0114857208254003
  beta  nocc = 8  HOMO = -0.239715313200749  LUMO = -0.195792672585756
cycle= 4 E= -398.793934560524  delta_E= -0.000516  |g|= 0.00514  |ddm|= 0.0348
  alpha nocc = 9  HOMO = -0.251198729742629  LUMO = -0.0106603136281918
  beta  nocc = 8  HOMO = -0.238206227046127  LUMO = -0.19365413102449
cycle= 5 E= -398.79395012906  delta_E= -1.56e-05  |g|= 0.00185  |ddm|= 0.00645
  alpha nocc = 9  HOMO = -0.251596070306477  LUMO = -0.0108446743840679
  beta  nocc = 8  HOMO = -0.238557378552841  LUMO = -0.193974024989684
cycle= 6 E= -398.793951514724  delta_E= -1.39e-06  |g|= 0.00026  |ddm|= 0.00209
  alpha nocc = 9  HOMO = -0.251562046227689  LUMO = -0.0108294641131948
  beta  nocc = 8  HOMO = -0.238494003766621  LUMO = -0.193904725410418
cycle= 7 E= -398.793951547739  delta_E= -3.3e-08  |g|= 6.2e-05  |ddm|= 0.000498
  alpha nocc = 9  HOMO = -0.25158323231411  LUMO = -0.0108389778802744
  beta  nocc = 8  HOMO = -0.238511535230674  LUMO = -0.193920013027295
Extra cycle  E= -398.793951548863  delta_E= -1.12e-09  |g|= 3.37e-05  |ddm|= 0.000108
converged SCF energy = -398.793951548863  <S^2> = 0.75800355  2S+1 = 2.0079876
