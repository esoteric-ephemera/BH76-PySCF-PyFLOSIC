#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/RKT06/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 14:31:21 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 3
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 1
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.929473380000 AA    0.000000000000   0.000000000000   1.756450128274 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -0.929473380000 AA    0.000000000000   0.000000000000  -1.756450128274 Bohr

nuclear repulsion = 1.42332535365349
number of shells = 42
number of NR pGTOs = 144
number of NR cGTOs = 138
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.35


******** <class 'pyscf.dft.uks.UKS'> ********
method = UKS-UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmp0_krcxk7
max_memory 4000 MB (current use 64 MB)
number electrons alpha = 2  beta = 1
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ac872970940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ac8729708b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 516648
init E= -1.45388558510934
  alpha nocc = 2  HOMO = -0.187952237290996  LUMO = 0.0419628885982129
  beta  nocc = 1  HOMO = -0.471907401189213  LUMO = -0.187952237290991

WARN: system HOMO -0.187952237290991 >= system LUMO -0.187952237290991

cycle= 1 E= -1.66405166419311  delta_E= -0.21  |g|= 0.0581  |ddm|= 0.499
  alpha nocc = 2  HOMO = -0.233216451230162  LUMO = 0.0313464790511174
  beta  nocc = 1  HOMO = -0.424500291739025  LUMO = -0.122842759773859
cycle= 2 E= -1.66771739440559  delta_E= -0.00367  |g|= 0.0157  |ddm|= 0.367
  alpha nocc = 2  HOMO = -0.236760156707819  LUMO = 0.0392753300062077
  beta  nocc = 1  HOMO = -0.427460189946297  LUMO = -0.111838366920402
cycle= 3 E= -1.66804585202658  delta_E= -0.000328  |g|= 0.00354  |ddm|= 0.0867
  alpha nocc = 2  HOMO = -0.236149657770351  LUMO = 0.040863465345913
  beta  nocc = 1  HOMO = -0.424744390941289  LUMO = -0.109194935607168
cycle= 4 E= -1.66805720171877  delta_E= -1.13e-05  |g|= 0.000578  |ddm|= 0.00891
  alpha nocc = 2  HOMO = -0.236337905710384  LUMO = 0.041011807855451
  beta  nocc = 1  HOMO = -0.425136700754262  LUMO = -0.109285946909836
cycle= 5 E= -1.66805750558089  delta_E= -3.04e-07  |g|= 0.000196  |ddm|= 0.00644
  alpha nocc = 2  HOMO = -0.236297707118665  LUMO = 0.0411101482459239
  beta  nocc = 1  HOMO = -0.42510934107525  LUMO = -0.109236120104904
cycle= 6 E= -1.66805751575633  delta_E= -1.02e-08  |g|= 0.000175  |ddm|= 0.00315
  alpha nocc = 2  HOMO = -0.236299385365572  LUMO = 0.0411200640374932
  beta  nocc = 1  HOMO = -0.425111089426218  LUMO = -0.109237674127119
Extra cycle  E= -1.66805751897197  delta_E= -3.22e-09  |g|= 0.000169  |ddm|= 0.0018
converged SCF energy = -1.66805751897197  <S^2> = 0.76207986  2S+1 = 2.0120436
