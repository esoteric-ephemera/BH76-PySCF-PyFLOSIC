#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/hoch3fcomp2/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:58:04 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 7
[INPUT] num. electrons = 28
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      2.249532920000  -0.161634700000  -0.009064510000 AA    4.251001126993  -0.305445315226  -0.017129441353 Bohr
[INPUT]  2 C      0.839893100000   0.020306500000   0.003107520000 AA    1.587167932912   0.038373723548   0.005872361727 Bohr
[INPUT]  3 H      0.351783820000  -0.871344470000  -0.364815500000 AA    0.664775074853  -1.646602408454  -0.689401380996 Bohr
[INPUT]  4 H      0.522422740000   0.213180490000   1.019583090000 AA    0.987235899845   0.402852741201   1.926732801338 Bohr
[INPUT]  5 H      0.600223970000   0.862293120000  -0.634545610000 AA    1.134258916699   1.629497835897  -1.199117416445 Bohr
[INPUT]  6 O     -1.818966980000  -0.158320460000  -0.005980500000 AA   -3.437349421827  -0.299182309315  -0.011301507088 Bohr
[INPUT]  7 H     -2.744889580000   0.095519520000  -0.008284500000 AA   -5.187089548372   0.180505732350  -0.015655436079 Bohr

nuclear repulsion = 67.4307099775755
number of shells = 113
number of NR pGTOs = 471
number of NR cGTOs = 424
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.48


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmp_kwbutjk
max_memory 4000 MB (current use 62 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2b4e2c946940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2b4e2c9468b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 1161880
init E= -215.366355840395
  HOMO = -0.380454668442529  LUMO = -0.0201976756775096
cycle= 1 E= -215.292692179008  delta_E= 0.0737  |g|=  1.2  |ddm|= 1.36
  HOMO = 0.142886785866836  LUMO = 0.147332718889985
cycle= 2 E= -206.564065937573  delta_E= 8.73  |g|= 2.81  |ddm|=  644
  HOMO = -0.158301770601206  LUMO = 0.0367437652997863
cycle= 3 E= -215.350461300898  delta_E= -8.79  |g|= 0.999  |ddm|=  644
  HOMO = -0.229611936924508  LUMO = 0.0648020006597589
cycle= 4 E= -215.441751604307  delta_E= -0.0913  |g|= 0.773  |ddm|= 0.327
  HOMO = -0.106646117351057  LUMO = 0.101013716286503
cycle= 5 E= -215.500959604442  delta_E= -0.0592  |g|= 0.61  |ddm|= 0.26
  HOMO = 0.0352350114148502  LUMO = 0.117272854796345
cycle= 6 E= -215.581521055686  delta_E= -0.0806  |g|= 0.15  |ddm|= 0.814
  HOMO = 0.0686589981454013  LUMO = 0.118368851142166
cycle= 7 E= -215.581750370093  delta_E= -0.000229  |g|= 0.137  |ddm|=  1.4
  HOMO = 0.045507535353761  LUMO = 0.114928661648418
cycle= 8 E= -215.586135369138  delta_E= -0.00438  |g|= 0.00782  |ddm|= 0.988
  HOMO = 0.0472535783501399  LUMO = 0.115168966480142
cycle= 9 E= -215.586141710697  delta_E= -6.34e-06  |g|= 0.00714  |ddm|= 0.0612
  HOMO = 0.046303482467732  LUMO = 0.115145932942474
cycle= 10 E= -215.586151980876  delta_E= -1.03e-05  |g|= 0.000888  |ddm|= 0.0337
  HOMO = 0.0461388409891584  LUMO = 0.115164750097718
cycle= 11 E= -215.586152146027  delta_E= -1.65e-07  |g|= 0.000128  |ddm|= 0.00633
  HOMO = 0.0461107037883514  LUMO = 0.115168964575783
cycle= 12 E= -215.586152149635  delta_E= -3.61e-09  |g|= 1.12e-05  |ddm|= 0.00103
  HOMO = 0.0461062359193291  LUMO = 0.115170359090942
Extra cycle  E= -215.58615214952  delta_E= 1.15e-10  |g|= 2.67e-05  |ddm|= 0.000195
converged SCF energy = -215.58615214952
