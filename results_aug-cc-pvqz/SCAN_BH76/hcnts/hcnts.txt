#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/hcnts/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 17:40:56 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 14
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      0.374821710000   0.517830100000   0.000000000000 AA    0.708310377441   0.978557068056   0.000000000000 Bohr
[INPUT]  2 N      0.374821710000  -0.670522080000   0.000000000000 AA    0.708310377441  -1.267103091674   0.000000000000 Bohr
[INPUT]  3 H     -0.749643430000   0.152691980000   0.000000000000 AA   -1.416620773780   0.288546023618   0.000000000000 Bohr

nuclear repulsion = 24.0463694160012
number of shells = 52
number of NR pGTOs = 234
number of NR cGTOs = 206
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.27


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpmr1w4p16
max_memory 4000 MB (current use 79 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2ab6aa139940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2ab6aa1398b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 480612
init E= -93.4796988108733
  HOMO = -0.334969001786971  LUMO = -0.104254861800535
cycle= 1 E= -93.333060214934  delta_E= 0.147  |g|= 0.212  |ddm|= 1.26
  HOMO = -0.281921279938251  LUMO = -0.07976083209877
cycle= 2 E= -93.3331035493618  delta_E= -4.33e-05  |g|= 0.209  |ddm|= 0.312
  HOMO = -0.316428847245135  LUMO = -0.10212457877017
cycle= 3 E= -93.3447409150393  delta_E= -0.0116  |g|= 0.0389  |ddm|= 0.161
  HOMO = -0.316850296266476  LUMO = -0.0992413672751369
cycle= 4 E= -93.3446810293086  delta_E= 5.99e-05  |g|= 0.0407  |ddm|= 0.031
  HOMO = -0.315622427464529  LUMO = -0.0996840353244149
cycle= 5 E= -93.3450598448293  delta_E= -0.000379  |g|= 0.00381  |ddm|= 0.0194
  HOMO = -0.315003854911916  LUMO = -0.0989851506137274
cycle= 6 E= -93.3450629829408  delta_E= -3.14e-06  |g|= 0.00101  |ddm|= 0.00327
  HOMO = -0.315238536903978  LUMO = -0.0992044419499616
cycle= 7 E= -93.3450631921775  delta_E= -2.09e-07  |g|= 9.8e-05  |ddm|= 0.000983
  HOMO = -0.315240728367282  LUMO = -0.0991967403649774
cycle= 8 E= -93.345063194199  delta_E= -2.02e-09  |g|= 2.21e-05  |ddm|= 0.00012
  HOMO = -0.315237022189339  LUMO = -0.09919495981709
Extra cycle  E= -93.3450631941685  delta_E= 3.04e-11  |g|= 2.32e-05  |ddm|= 2.91e-05
converged SCF energy = -93.3450631941685
