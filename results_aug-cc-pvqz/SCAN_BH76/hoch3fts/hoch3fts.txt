#INFO: **** input file is /home/tuf53878/BH76/SCAN_BH76/hoch3fts/run_single_point.py ****
import numpy as np
from pyscf import gto,dft

opt_type = {
    'float': ['tol','levelshift'],
    'int': ['gridsize','max_cycle','charge','2S','verbose'],
    'bool': ['symm','restricted'],
    'str': ['xyz_fl','basis','xc','xc_lib','ecp','logfile']
}

def str_parse(key,val):
    if key in opt_type['str']:
        # quick return
        return val
    elif key in opt_type['float']:
        return float(val)
    elif key in opt_type['int']:
        return int(val)
    elif key in opt_type['bool']:
        if val.lower() in ['true','t']:
            return True
        elif val.lower() in ['false','f']:
            return False
        else:
            estr = "Could not process key {:} with value {:}; expected boolean".format(key,val)
            raise SystemExit(estr)
    else:
        estr = "Unknown key {:} with value {:}".format(key,val)
        raise SystemExit(estr)

def parse_inp(flnm):

    opts = {}
    with open(flnm,'r') as tfl:
        for row in tfl:
            tmp = [x.strip() for x in row.split('=')]
            if len(tmp) == 1:
                # blank line
                continue
            if ':' in tmp[1]:
                # dict type option
                tmp2 = [x.strip() for x in tmp[1].split(';')]
                opts[tmp[0]] = {}
                for x in tmp2:
                    tmp3 = [y.strip() for y in x.split(':')]
                    opts[tmp[0]][tmp3[0].strip()] = str_parse(tmp[0],tmp3[1])
            else:
                opts[tmp[0]] = str_parse(tmp[0],tmp[1])

    return opts

def molscf():

    dopts = {
        'gridsize': 5, 'basis': 'def2-QZVP', 'symm': False,
        'tol': 1.e-7, 'max_cycle': 500, 'charge': 0, '2S': 0,
        'xc': '1.0*SLATERX, 1.0*PW92C', 'xc_lib': 'XCFun', 'verbose': 4,
        'restricted': False, 'ecp' : {}
        }

    uopts = parse_inp('./inp.txt')

    for akey in uopts:
        dopts[akey] = uopts[akey]

    mol = gto.M(atom=dopts['xyz_fl'], basis=dopts['basis'], symmetry=dopts['symm'], \
        charge=dopts['charge'], spin=dopts['2S'], output = dopts['logfile'], \
        verbose = dopts['verbose'], ecp = dopts['ecp'])

    if dopts['restricted']:
        kscalc = dft.RKS(mol)
    else:
        kscalc = dft.UKS(mol)

    kscalc.max_cycle = dopts['max_cycle']
    kscalc.conv_tol = dopts['tol']
    kscalc.grids.level = dopts['gridsize']

    if dopts['xc_lib'] == 'XCFun':
        kscalc._numint.libxc = dft.xcfun
    elif dopts['xc_lib'] != 'LibXC':
        raise SystemExit('Unknown XC library '+ dopts['xc_lib'])
    kscalc.xc = dopts['xc']

    if 'levelshift' in dopts:
        kscalc.level_shift = dopts['levelshift']

    e0 = kscalc.kernel()

    odict = {
        'Etot': kscalc.e_tot, 'Converged': kscalc.converged,
    }
    fname = './pyscf_run.yaml'
    with open(fname,'w+') as tfl:
        for akey in odict:
            tfl.write('{:}: {:}\n'.format(akey,odict[akey]))

    np.save('./orbital_eigenvalues.npy',kscalc.mo_energy)
    np.save('./orbital_occupancies.npy',kscalc.mo_occ)
    np.save('./orbital_coefficients.npy',kscalc.mo_coeff)

    return e0

if __name__ == "__main__":

    #print(parse_inp('./sample.txt'))
    molscf()
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='e068', release='3.10.0-1160.25.1.el7.x86_64', version='#1 SMP Wed Apr 28 21:49:45 UTC 2021', machine='x86_64')  Threads 20
Python 3.9.4 (default, Jun 10 2021, 14:03:49) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
numpy 1.22.2  scipy 1.8.0
Date: Mon May  9 18:03:31 2022
PySCF version 2.0.1
PySCF path  /home/tuf53878/.local/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 7
[INPUT] num. electrons = 28
[INPUT] charge = -1
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 F      2.137702640000   0.082587800000  -0.000199420000 AA    4.039672525360   0.156068323230  -0.000376849184 Bohr
[INPUT]  2 C      0.377942220000   0.106352780000   0.000197580000 AA    0.714207286710   0.200977626786   0.000373372088 Bohr
[INPUT]  3 H      0.327992180000   1.175314850000  -0.011820430000 AA    0.619815391199   2.221023176634  -0.022337375375 Bohr
[INPUT]  4 H      0.324248140000  -0.432246260000  -0.923014750000 AA    0.612740181000  -0.816827049768  -1.744245086434 Bohr
[INPUT]  5 H      0.324571150000  -0.411696190000   0.935058860000 AA    0.613350581435  -0.777993045627   1.767005155748 Bohr
[INPUT]  6 O     -1.605718380000   0.199033100000  -0.000189420000 AA   -3.034367971380   0.376118048723  -0.000357951923 Bohr
[INPUT]  7 H     -1.886737960000  -0.719346080000  -0.000032420000 AA   -3.565418013221  -1.359367079979  -0.000061264921 Bohr

nuclear repulsion = 69.0054929743287
number of shells = 113
number of NR pGTOs = 471
number of NR cGTOs = 424
basis = aug-cc-pvqz
ecp = {}
CPU time:         2.13


******** <class 'pyscf.dft.rks.RKS'> ********
method = RKS-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-07
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /local_scratch/tmp/444417/tmpgv8hjxsj
max_memory 4000 MB (current use 60 MB)
XC library pyscf.dft.libxc version 5.1.7
    S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018)
XC functionals = MGGA_X_SCAN, MGGA_C_SCAN
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
    J. Sun, A. Ruzsinszky, and J. P. Perdew, Phys. Rev. Lett. 115, 036402 (2015)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x2af61389e940>
grids dens level: 9
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x2af61389e8b0>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 0.000316228
tot grids = 1161880
init E= -215.236111019862
  HOMO = -0.378403826428455  LUMO = -0.0843640317673375
cycle= 1 E= -215.30068437542  delta_E= -0.0646  |g|=  1.2  |ddm|=  1.3
  HOMO = 0.138499881173218  LUMO = 0.143442072337616
cycle= 2 E= -209.869666237851  delta_E= 5.43  |g|= 3.55  |ddm|=  590
  HOMO = -0.114065706341918  LUMO = 0.0812318733889723
cycle= 3 E= -215.492318263241  delta_E= -5.62  |g|= 0.569  |ddm|=  590
  HOMO = -0.0502096356168327  LUMO = 0.106298546593093
cycle= 4 E= -215.530699856609  delta_E= -0.0384  |g|= 0.529  |ddm|= 0.444
  HOMO = -0.0130183752578181  LUMO = 0.118791609345558
cycle= 5 E= -215.572563337122  delta_E= -0.0419  |g|= 0.169  |ddm|= 0.359
  HOMO = 0.00210759006513997  LUMO = 0.118279020926452
cycle= 6 E= -215.57709270467  delta_E= -0.00453  |g|= 0.0268  |ddm|= 0.111
  HOMO = 0.000284142945290195  LUMO = 0.117753026307017
cycle= 7 E= -215.577212443364  delta_E= -0.00012  |g|= 0.0115  |ddm|= 0.0218
  HOMO = -0.000558816725597576  LUMO = 0.117491189170085
cycle= 8 E= -215.57724289801  delta_E= -3.05e-05  |g|= 0.00308  |ddm|= 0.0132
  HOMO = -0.0009893629629707  LUMO = 0.117393944850675
cycle= 9 E= -215.577244523771  delta_E= -1.63e-06  |g|= 0.000696  |ddm|= 0.00431
  HOMO = -0.00109974286465023  LUMO = 0.117388597649114
cycle= 10 E= -215.577244614713  delta_E= -9.09e-08  |g|= 0.000111  |ddm|= 0.00124
  HOMO = -0.0011519189460471  LUMO = 0.117384426380493
Extra cycle  E= -215.577244601343  delta_E= 1.34e-08  |g|= 0.000284  |ddm|= 0.000429
converged SCF energy = -215.577244601343
